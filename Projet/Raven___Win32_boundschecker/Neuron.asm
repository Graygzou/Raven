; Listing generated by Microsoft (R) Optimizing Compiler Version 19.11.25507.1 

	TITLE	D:\UQAC\IAR\ProjetV2\ProjetIAFinal\Projet\Neuron.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?eta@Neuron@@0NA				; Neuron::eta
PUBLIC	?alpha@Neuron@@0NA				; Neuron::alpha
_DATA	SEGMENT
?eta@Neuron@@0NA DQ 03fc3333333333333r		; 0.15	; Neuron::eta
?alpha@Neuron@@0NA DQ 03fe0000000000000r	; 0.5	; Neuron::alpha
_DATA	ENDS
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	??1_Container_base12@std@@QAE@XZ		; std::_Container_base12::~_Container_base12
PUBLIC	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Clrcont@_Iterator_base12@std@@QAEXXZ		; std::_Iterator_base12::_Clrcont
PUBLIC	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ	; std::_Iterator_base12::_Getpnext
PUBLIC	?_Allocate@std@@YAPAXII_N@Z			; std::_Allocate
PUBLIC	?_Deallocate@std@@YAXPAXII@Z			; std::_Deallocate
PUBLIC	??0Neuron@@QAE@II@Z				; Neuron::Neuron
PUBLIC	??1Neuron@@QAE@XZ				; Neuron::~Neuron
PUBLIC	?GetOutputVal@Neuron@@QBENXZ			; Neuron::GetOutputVal
PUBLIC	?FeedForward@Neuron@@QAEXABV?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@Z ; Neuron::FeedForward
PUBLIC	?CalcOutputGradients@Neuron@@QAEXN@Z		; Neuron::CalcOutputGradients
PUBLIC	?CalcHiddenGradients@Neuron@@QAEXABV?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@Z ; Neuron::CalcHiddenGradients
PUBLIC	?UpdateInputWeights@Neuron@@QAEXAAV?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@Z ; Neuron::UpdateInputWeights
PUBLIC	?RandomWeight@Neuron@@CANXZ			; Neuron::RandomWeight
PUBLIC	??0?$allocator@UConnection@@@std@@QAE@XZ	; std::allocator<Connection>::allocator<Connection>
PUBLIC	?deallocate@?$allocator@UConnection@@@std@@QAEXQAUConnection@@I@Z ; std::allocator<Connection>::deallocate
PUBLIC	?allocate@?$allocator@UConnection@@@std@@QAEPAUConnection@@I@Z ; std::allocator<Connection>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@UConnection@@@std@@@std@@SAIABV?$allocator@UConnection@@@2@@Z ; std::_Default_allocator_traits<std::allocator<Connection> >::max_size
PUBLIC	??0?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >
PUBLIC	??1?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::~_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >
PUBLIC	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Free_proxy
PUBLIC	?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Getpfirst
PUBLIC	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myproxy
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Orphan_all
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAV?$allocator@UConnection@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Getal
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABV?$allocator@UConnection@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Getal
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Get_data
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Get_data
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myfirst
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABQAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Mylast
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABQAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Mylast
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myend
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABQAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myend
PUBLIC	??0?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<Connection> >::_Vector_val<std::_Simple_types<Connection> >
PUBLIC	??1?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<Connection> >::~_Vector_val<std::_Simple_types<Connection> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QAEAAV?$allocator@UConnection@@@2@XZ ; std::_Compressed_pair<std::allocator<Connection>,std::_Vector_val<std::_Simple_types<Connection> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QBEABV?$allocator@UConnection@@@2@XZ ; std::_Compressed_pair<std::allocator<Connection>,std::_Vector_val<std::_Simple_types<Connection> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<Connection>,std::_Vector_val<std::_Simple_types<Connection> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<Connection>,std::_Vector_val<std::_Simple_types<Connection> >,1>::_Get_second
PUBLIC	??1?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::allocator<Connection>,std::_Vector_val<std::_Simple_types<Connection> >,1>::~_Compressed_pair<std::allocator<Connection>,std::_Vector_val<std::_Simple_types<Connection> >,1>
PUBLIC	??0?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@XZ ; std::vector<Connection,std::allocator<Connection> >::vector<Connection,std::allocator<Connection> >
PUBLIC	??1?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@XZ ; std::vector<Connection,std::allocator<Connection> >::~vector<Connection,std::allocator<Connection> >
PUBLIC	?push_back@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAEX$$QAUConnection@@@Z ; std::vector<Connection,std::allocator<Connection> >::push_back
PUBLIC	?empty@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBE_NXZ ; std::vector<Connection,std::allocator<Connection> >::empty
PUBLIC	?size@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBEIXZ ; std::vector<Connection,std::allocator<Connection> >::size
PUBLIC	?max_size@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBEIXZ ; std::vector<Connection,std::allocator<Connection> >::max_size
PUBLIC	?capacity@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBEIXZ ; std::vector<Connection,std::allocator<Connection> >::capacity
PUBLIC	?_Has_unused_capacity@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@ABE_NXZ ; std::vector<Connection,std::allocator<Connection> >::_Has_unused_capacity
PUBLIC	??A?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAEAAUConnection@@I@Z ; std::vector<Connection,std::allocator<Connection> >::operator[]
PUBLIC	??A?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBEABUConnection@@I@Z ; std::vector<Connection,std::allocator<Connection> >::operator[]
PUBLIC	?back@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAEAAUConnection@@XZ ; std::vector<Connection,std::allocator<Connection> >::back
PUBLIC	?_Umove_if_noexcept1@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEXPAUConnection@@00U?$integral_constant@_N$00@2@@Z ; std::vector<Connection,std::allocator<Connection> >::_Umove_if_noexcept1
PUBLIC	?_Umove_if_noexcept@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEXPAUConnection@@00@Z ; std::vector<Connection,std::allocator<Connection> >::_Umove_if_noexcept
PUBLIC	?_Destroy@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEXPAUConnection@@0@Z ; std::vector<Connection,std::allocator<Connection> >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@ABEII@Z ; std::vector<Connection,std::allocator<Connection> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEXQAUConnection@@II@Z ; std::vector<Connection,std::allocator<Connection> >::_Change_array
PUBLIC	?_Tidy@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEXXZ ; std::vector<Connection,std::allocator<Connection> >::_Tidy
PUBLIC	?_Xlength@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@CAXXZ ; std::vector<Connection,std::allocator<Connection> >::_Xlength
PUBLIC	?_Orphan_range@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@ABEXPAUConnection@@0@Z ; std::vector<Connection,std::allocator<Connection> >::_Orphan_range
PUBLIC	?TransferFunction@Neuron@@CANN@Z		; Neuron::TransferFunction
PUBLIC	?TransferFunctionDerivative@Neuron@@CANN@Z	; Neuron::TransferFunctionDerivative
PUBLIC	?SumDOW@Neuron@@ABENABV?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@Z ; Neuron::SumDOW
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Neuron,std::allocator<Neuron> > >::_Get_data
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Neuron,std::allocator<Neuron> > >::_Get_data
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@std@@QAEAAPAVNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Neuron,std::allocator<Neuron> > >::_Myfirst
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@std@@QBEABQAVNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Neuron,std::allocator<Neuron> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@std@@QBEABQAVNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Neuron,std::allocator<Neuron> > >::_Mylast
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@VNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<Neuron>,std::_Vector_val<std::_Simple_types<Neuron> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@VNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<Neuron>,std::_Vector_val<std::_Simple_types<Neuron> >,1>::_Get_second
PUBLIC	?size@?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@QBEIXZ ; std::vector<Neuron,std::allocator<Neuron> >::size
PUBLIC	??A?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@QAEAAVNeuron@@I@Z ; std::vector<Neuron,std::allocator<Neuron> >::operator[]
PUBLIC	??A?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@QBEABVNeuron@@I@Z ; std::vector<Neuron,std::allocator<Neuron> >::operator[]
PUBLIC	??$move@AAUConnection@@@std@@YA$$QAUConnection@@AAU1@@Z ; std::move<Connection &>
PUBLIC	??$emplace_back@UConnection@@@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@$$QAUConnection@@@Z ; std::vector<Connection,std::allocator<Connection> >::emplace_back<Connection>
PUBLIC	??$forward@UConnection@@@std@@YA$$QAUConnection@@AAU1@@Z ; std::forward<Connection>
PUBLIC	??$_Emplace_back_with_unused_capacity@UConnection@@@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEX$$QAUConnection@@@Z ; std::vector<Connection,std::allocator<Connection> >::_Emplace_back_with_unused_capacity<Connection>
PUBLIC	??$_Unfancy@UConnection@@@std@@YAPAUConnection@@PAU1@@Z ; std::_Unfancy<Connection>
PUBLIC	??$construct@UConnection@@U1@@?$_Default_allocator_traits@V?$allocator@UConnection@@@std@@@std@@SAXAAV?$allocator@UConnection@@@1@QAUConnection@@$$QAU3@@Z ; std::_Default_allocator_traits<std::allocator<Connection> >::construct<Connection,Connection>
PUBLIC	??$destroy@UConnection@@@?$_Default_allocator_traits@V?$allocator@UConnection@@@std@@@std@@SAXAAV?$allocator@UConnection@@@1@QAUConnection@@@Z ; std::_Default_allocator_traits<std::allocator<Connection> >::destroy<Connection>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<Connection>,std::_Vector_val<std::_Simple_types<Connection> >,1>::_Compressed_pair<std::allocator<Connection>,std::_Vector_val<std::_Simple_types<Connection> >,1><>
PUBLIC	??$_Min_value@I@std@@YAABIABI0@Z		; std::_Min_value<unsigned int>
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0UConnection@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UConnection@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Connection>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<Connection> > >
PUBLIC	??$_Destroy_range@V?$allocator@UConnection@@@std@@@std@@YAXPAUConnection@@0AAV?$allocator@UConnection@@@0@@Z ; std::_Destroy_range<std::allocator<Connection> >
PUBLIC	??$_Uninitialized_move@PAUConnection@@PAU1@V?$allocator@UConnection@@@std@@@std@@YAPAUConnection@@PAU1@00AAV?$allocator@UConnection@@@0@@Z ; std::_Uninitialized_move<Connection *,Connection *,std::allocator<Connection> >
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
PUBLIC	??$_Destroy_range1@V?$allocator@UConnection@@@std@@@std@@YAXPAUConnection@@0AAV?$allocator@UConnection@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<Connection> >
PUBLIC	??$_Unchecked@PAUConnection@@@std@@YAPAUConnection@@PAU1@@Z ; std::_Unchecked<Connection *>
PUBLIC	??$_Ptr_move_cat@UConnection@@U1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAUConnection@@0@Z ; std::_Ptr_move_cat<Connection,Connection>
PUBLIC	??$_Uninitialized_move_al_unchecked@UConnection@@U1@V?$allocator@UConnection@@@std@@@std@@YAPAUConnection@@PAU1@00AAV?$allocator@UConnection@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_move_al_unchecked<Connection,Connection,std::allocator<Connection> >
PUBLIC	??$_Rechecked@PAUConnection@@PAU1@@std@@YAAAPAUConnection@@AAPAU1@PAU1@@Z ; std::_Rechecked<Connection *,Connection *>
PUBLIC	??$_Copy_memmove@PAUConnection@@PAU1@@std@@YAPAUConnection@@PAU1@00@Z ; std::_Copy_memmove<Connection *,Connection *>
PUBLIC	??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@ ; `string'
PUBLIC	??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@	; `string'
PUBLIC	??_C@_1NC@LIFDFPCJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_09GLJCAGLP@_Ptr?5?$CB?$DN?50?$AA@		; `string'
PUBLIC	??_C@_1CC@GKJLLHIM@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1MO@PKCMDADL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1DM@ONDPIFDL@?$AAb?$AAa?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAn?$AA?5?$AAe?$AAm?$AAp?$AAt?$AAy?$AA?5?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1JM@CJDGKBLO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?0?$AAc?$AAl@ ; `string'
PUBLIC	??_C@_1EA@OBAHGFFK@?$AA?$CC?$AAb?$AAa?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAn?$AA?5?$AAe?$AAm?$AAp?$AAt?$AAy?$AA?5?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1KK@JHMDJAOJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?0?$AAc?$AAl@ ; `string'
PUBLIC	??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1JG@NBFEKNNI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAN?$AAe?$AAu?$AAr?$AAo?$AAn?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40dfffc000000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	__invalid_parameter:PROC
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	_rand:PROC
EXTRN	_tanh:PROC
EXTRN	_memmove:PROC
EXTRN	__CrtDbgReportW:PROC
EXTRN	?_Debug_message@std@@YAXPB_W0I@Z:PROC		; std::_Debug_message
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@40dfffc000000000
CONST	SEGMENT
__real@40dfffc000000000 DQ 040dfffc000000000r	; 32767
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1JG@NBFEKNNI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAN?$AAe?$AAu?$AAr?$AAo?$AAn?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs@
CONST	SEGMENT
??_C@_1JG@NBFEKNNI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAN?$AAe?$AAu?$AAr?$AAo?$AAn?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'N', 00H, 'e', 00H
	DB	'u', 00H, 'r', 00H, 'o', 00H, 'n', 00H, ',', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H
	DB	'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'N'
	DB	00H, 'e', 00H, 'u', 00H, 'r', 00H, 'o', 00H, 'n', 00H, '>', 00H
	DB	' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'[', 00H, ']', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1KK@JHMDJAOJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?0?$AAc?$AAl@
CONST	SEGMENT
??_C@_1KK@JHMDJAOJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?0?$AAc?$AAl@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 'C', 00H
	DB	'o', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H
	DB	's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':'
	DB	00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 'C', 00H
	DB	'o', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H
	DB	':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, '[', 00H, ']', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r', 00H, 'i'
	DB	00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n'
	DB	00H, 'g', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@OBAHGFFK@?$AA?$CC?$AAb?$AAa?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAn?$AA?5?$AAe?$AAm?$AAp?$AAt?$AAy?$AA?5?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@OBAHGFFK@?$AA?$CC?$AAb?$AAa?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAn?$AA?5?$AAe?$AAm?$AAp?$AAt?$AAy?$AA?5?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'b', 00H, 'a', 00H, 'c', 00H, 'k', 00H, '(', 00H, ')', 00H
	DB	' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'd'
	DB	00H, ' ', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'e', 00H, 'm', 00H
	DB	'p', 00H, 't', 00H, 'y', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1JM@CJDGKBLO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?0?$AAc?$AAl@
CONST	SEGMENT
??_C@_1JM@CJDGKBLO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?0?$AAc?$AAl@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 'C', 00H
	DB	'o', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H
	DB	's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':'
	DB	00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 'C', 00H
	DB	'o', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H
	DB	':', 00H, 'b', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@ONDPIFDL@?$AAb?$AAa?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAn?$AA?5?$AAe?$AAm?$AAp?$AAt?$AAy?$AA?5?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@ONDPIFDL@?$AAb?$AAa?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAn?$AA?5?$AAe?$AAm?$AAp?$AAt?$AAy?$AA?5?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$AA@ DB 'b'
	DB	00H, 'a', 00H, 'c', 00H, 'k', 00H, '(', 00H, ')', 00H, ' ', 00H
	DB	'c', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' '
	DB	00H, 'o', 00H, 'n', 00H, ' ', 00H, 'e', 00H, 'm', 00H, 'p', 00H
	DB	't', 00H, 'y', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1MO@PKCMDADL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1MO@PKCMDADL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '1', 00H, '.', 00H, '2', 00H, '5', 00H, '5', 00H
	DB	'0', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'D', 00H
	DB	'e', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@GKJLLHIM@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@GKJLLHIM@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ DB '"'
	DB	00H, '_', 00H, 'P', 00H, 't', 00H, 'r', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, '"', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09GLJCAGLP@_Ptr?5?$CB?$DN?50?$AA@
CONST	SEGMENT
??_C@_09GLJCAGLP@_Ptr?5?$CB?$DN?50?$AA@ DB '_Ptr != 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NC@LIFDFPCJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1NC@LIFDFPCJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '1', 00H, '.', 00H, '2', 00H, '5', 00H, '5', 00H
	DB	'0', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@ DB '%', 00H, 'l', 00H, 's', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ DB '"'
	DB	00H, '_', 00H, 'P', 00H, 't', 00H, 'r', 00H, '_', 00H, 'c', 00H
	DB	'o', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	'"', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@
CONST	SEGMENT
??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@ DB '_Ptr_container !='
	DB	' 0', 00H					; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$emplace_back@UConnection@@@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@$$QAUConnection@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$emplace_back@UConnection@@@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@$$QAUConnection@@@Z$0
__unwindtable$??$emplace_back@UConnection@@@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@$$QAUConnection@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$emplace_back@UConnection@@@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@$$QAUConnection@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$emplace_back@UConnection@@@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@$$QAUConnection@@@Z$2
__ehfuncinfo$??$emplace_back@UConnection@@@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@$$QAUConnection@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$emplace_back@UConnection@@@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@$$QAUConnection@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$emplace_back@UConnection@@@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@$$QAUConnection@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@ABEXPAUConnection@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@ABEXPAUConnection@@0@Z$0
__ehfuncinfo$?_Orphan_range@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@ABEXPAUConnection@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@ABEXPAUConnection@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$??0Neuron@@QAE@II@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Neuron@@QAE@II@Z$0
__ehfuncinfo$??0Neuron@@QAE@II@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Neuron@@QAE@II@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??$_Copy_memmove@PAUConnection@@PAU1@@std@@YAPAUConnection@@PAU1@00@Z
_TEXT	SEGMENT
__Count$ = -16						; size = 4
__Dest_ch$ = -12					; size = 4
__Last_ch$ = -8						; size = 4
__First_ch$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAUConnection@@PAU1@@std@@YAPAUConnection@@PAU1@00@Z PROC ; std::_Copy_memmove<Connection *,Connection *>, COMDAT

; 2239 : 	{	// implement copy-like function as memmove

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 2240 : 	const char * const _First_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_First));

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __First_ch$[ebp], eax

; 2241 : 	const char * const _Last_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_Last));

	mov	ecx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR __Last_ch$[ebp], ecx

; 2242 : 	char * const _Dest_ch = const_cast<char *>(reinterpret_cast<volatile char *>(_Dest));

	mov	edx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Dest_ch$[ebp], edx

; 2243 : 	const size_t _Count = _Last_ch - _First_ch;

	mov	eax, DWORD PTR __Last_ch$[ebp]
	sub	eax, DWORD PTR __First_ch$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 2244 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First_ch$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest_ch$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 2245 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

	mov	eax, DWORD PTR __Dest_ch$[ebp]
	add	eax, DWORD PTR __Count$[ebp]

; 2246 : 	}

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_memmove@PAUConnection@@PAU1@@std@@YAPAUConnection@@PAU1@00@Z ENDP ; std::_Copy_memmove<Connection *,Connection *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??$_Rechecked@PAUConnection@@PAU1@@std@@YAAAPAUConnection@@AAPAU1@PAU1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAUConnection@@PAU1@@std@@YAAAPAUConnection@@AAPAU1@PAU1@@Z PROC ; std::_Rechecked<Connection *,Connection *>, COMDAT

; 480  : 	{	// reset checked from unchecked, generic

	push	ebp
	mov	ebp, esp

; 481  : 	_Dest = _Src;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	DWORD PTR [eax], ecx

; 482  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 483  : 	}

	pop	ebp
	ret	0
??$_Rechecked@PAUConnection@@PAU1@@std@@YAAAPAUConnection@@AAPAU1@PAU1@@Z ENDP ; std::_Rechecked<Connection *,Connection *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked@UConnection@@U1@V?$allocator@UConnection@@@std@@@std@@YAPAUConnection@@PAU1@00AAV?$allocator@UConnection@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninitialized_move_al_unchecked@UConnection@@U1@V?$allocator@UConnection@@@std@@@std@@YAPAUConnection@@PAU1@00AAV?$allocator@UConnection@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Uninitialized_move_al_unchecked<Connection,Connection,std::allocator<Connection> >, COMDAT

; 156  : 	{	// move [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

	push	ebp
	mov	ebp, esp

; 157  : 	return (_Copy_memmove(_First, _Last, _Dest));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_memmove@PAUConnection@@PAU1@@std@@YAPAUConnection@@PAU1@00@Z ; std::_Copy_memmove<Connection *,Connection *>
	add	esp, 12					; 0000000cH

; 158  : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Uninitialized_move_al_unchecked@UConnection@@U1@V?$allocator@UConnection@@@std@@@std@@YAPAUConnection@@PAU1@00AAV?$allocator@UConnection@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked<Connection,Connection,std::allocator<Connection> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??$_Ptr_move_cat@UConnection@@U1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAUConnection@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Ptr_move_cat@UConnection@@U1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAUConnection@@0@Z PROC ; std::_Ptr_move_cat<Connection,Connection>, COMDAT

; 888  : 	{	// return pointer move optimization category for pointers

	push	ebp
	mov	ebp, esp

; 889  : 	return {};

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 890  : 	}

	pop	ebp
	ret	0
??$_Ptr_move_cat@UConnection@@U1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAUConnection@@0@Z ENDP ; std::_Ptr_move_cat<Connection,Connection>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??$_Unchecked@PAUConnection@@@std@@YAPAUConnection@@PAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAUConnection@@@std@@YAPAUConnection@@PAU1@@Z PROC ; std::_Unchecked<Connection *>, COMDAT

; 449  : 	{	// construct unchecked from checked, generic

	push	ebp
	mov	ebp, esp

; 450  : 	return (_Src);

	mov	eax, DWORD PTR __Src$[ebp]

; 451  : 	}

	pop	ebp
	ret	0
??$_Unchecked@PAUConnection@@@std@@YAPAUConnection@@PAU1@@Z ENDP ; std::_Unchecked<Connection *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@UConnection@@@std@@@std@@YAXPAUConnection@@0AAV?$allocator@UConnection@@@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range1@V?$allocator@UConnection@@@std@@@std@@YAXPAUConnection@@0AAV?$allocator@UConnection@@@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Destroy_range1<std::allocator<Connection> >, COMDAT

; 1103 : 	{	// destroy [_First, _Last), trivially destructible and default destroy

	push	ebp
	mov	ebp, esp

; 1104 : 		// nothing to do
; 1105 : 	}

	pop	ebp
	ret	0
??$_Destroy_range1@V?$allocator@UConnection@@@std@@@std@@YAXPAUConnection@@0AAV?$allocator@UConnection@@@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Destroy_range1<std::allocator<Connection> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\type_traits
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT

; 1591 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1592 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1593 : 	}

	pop	ebp
	ret	0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUConnection@@PAU1@V?$allocator@UConnection@@@std@@@std@@YAPAUConnection@@PAU1@00AAV?$allocator@UConnection@@@0@@Z
_TEXT	SEGMENT
$T1 = -30						; size = 1
$T2 = -29						; size = 1
__UDest$ = -24						; size = 4
__ULast$ = -16						; size = 4
__UFirst$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUConnection@@PAU1@V?$allocator@UConnection@@@std@@@std@@YAPAUConnection@@PAU1@00AAV?$allocator@UConnection@@@0@@Z PROC ; std::_Uninitialized_move<Connection *,Connection *,std::allocator<Connection> >, COMDAT

; 164  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 165  : 		// note: only called internally from elsewhere in the STL, debug checks
; 166  : 		// and deprecation warnings omitted
; 167  : 	const auto _UFirst = _Unchecked(_First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked@PAUConnection@@@std@@YAPAUConnection@@PAU1@@Z ; std::_Unchecked<Connection *>
	add	esp, 4
	mov	DWORD PTR __UFirst$[ebp], eax

; 168  : 	const auto _ULast = _Unchecked(_Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Unchecked@PAUConnection@@@std@@YAPAUConnection@@PAU1@@Z ; std::_Unchecked<Connection *>
	add	esp, 4
	mov	DWORD PTR __ULast$[ebp], eax

; 169  : 	const auto _UDest = _Unchecked(_Dest);

	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Unchecked@PAUConnection@@@std@@YAPAUConnection@@PAU1@@Z ; std::_Unchecked<Connection *>
	add	esp, 4
	mov	DWORD PTR __UDest$[ebp], eax

; 170  : 	return (_Rechecked(_Dest,

	movzx	eax, BYTE PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR __UDest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __UFirst$[ebp]
	push	edx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??$_Ptr_move_cat@UConnection@@U1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAUConnection@@0@Z ; std::_Ptr_move_cat<Connection,Connection>
	add	esp, 12					; 0000000cH
	mov	cl, BYTE PTR [eax]
	movzx	edx, cl
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __UDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __ULast$[ebp]
	push	edx
	mov	eax, DWORD PTR __UFirst$[ebp]
	push	eax
	call	??$_Uninitialized_move_al_unchecked@UConnection@@U1@V?$allocator@UConnection@@@std@@@std@@YAPAUConnection@@PAU1@00AAV?$allocator@UConnection@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_move_al_unchecked<Connection,Connection,std::allocator<Connection> >
	add	esp, 24					; 00000018H
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Rechecked@PAUConnection@@PAU1@@std@@YAAAPAUConnection@@AAPAU1@PAU1@@Z ; std::_Rechecked<Connection *,Connection *>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 171  : 		_Uninitialized_move_al_unchecked(_UFirst, _ULast, _UDest, _Al,
; 172  : 			_Ptr_move_cat(_UFirst, _UDest),
; 173  : 			_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_UDest)), decltype(_STD move(*_UFirst))>())));
; 174  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@Uninitiali
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@Uninitiali:
	DD	2
	DD	$LN5@Uninitiali
$LN5@Uninitiali:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@Uninitiali
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN4@Uninitiali
$LN4@Uninitiali:
	DB	95					; 0000005fH
	DB	85					; 00000055H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN3@Uninitiali:
	DB	95					; 0000005fH
	DB	85					; 00000055H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
??$_Uninitialized_move@PAUConnection@@PAU1@V?$allocator@UConnection@@@std@@@std@@YAPAUConnection@@PAU1@00AAV?$allocator@UConnection@@@0@@Z ENDP ; std::_Uninitialized_move<Connection *,Connection *,std::allocator<Connection> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@UConnection@@@std@@@std@@YAXPAUConnection@@0AAV?$allocator@UConnection@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UConnection@@@std@@@std@@YAXPAUConnection@@0AAV?$allocator@UConnection@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Connection> >, COMDAT

; 1112 : 	{	// destroy [_First, _Last), choose optimization

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1113 : 		// note that this is an optimization for debug mode codegen;
; 1114 : 		// in release mode the BE removes all of this
; 1115 : 	using _Val = typename _Alloc::value_type;
; 1116 : 	_Destroy_range1(_First, _Last, _Al, _Conjunction_t<

	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Destroy_range1@V?$allocator@UConnection@@@std@@@std@@YAXPAUConnection@@0AAV?$allocator@UConnection@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<Connection> >
	add	esp, 16					; 00000010H

; 1117 : 		is_trivially_destructible<_Val>,
; 1118 : 		_Uses_default_destroy<_Alloc, _Val *>>());
; 1119 : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UConnection@@@std@@@std@@YAXPAUConnection@@0AAV?$allocator@UConnection@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Connection> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<Connection> > >, COMDAT

; 248  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 249  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 250  : 	}

	pop	ebp
	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<Connection> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT

; 854  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 855  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 856  : 			_Objty(_STD forward<_Types>(_Args)...);
; 857  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 264  : 	{	// do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 265  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 266  : 	}

	pop	ebp
	ret	0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>, COMDAT

; 1220 : 	{	// deallocate a plain pointer using an allocator, non-fancy pointers special case

	push	ebp
	mov	ebp, esp

; 1221 : 	allocator_traits<_Alloc>::deallocate(_Al, _Ptr, 1);

	push	1
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
	add	esp, 12					; 0000000cH

; 1222 : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT

; 861  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 862  : 		_Ptr->~_Uty();
; 863  : 		}

	pop	ebp
	ret	0
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 847  : 		{	// deallocate _Count elements at _Ptr

	push	ebp
	mov	ebp, esp

; 848  : 		_Deallocate(_Ptr, _Count, sizeof(value_type));

	push	8
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH

; 849  : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$?0UConnection@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UConnection@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0UConnection@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UConnection@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Connection>, COMDAT
; _this$ = ecx

; 936  : 		{	// construct from a related allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 937  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0UConnection@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UConnection@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Connection>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 945  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 946  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof(_Ty))));

	push	1
	push	8
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	?_Allocate@std@@YAPAXII_N@Z		; std::_Allocate
	add	esp, 12					; 0000000cH

; 947  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\utility
;	COMDAT ??$_Min_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
$T1 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Min_value@I@std@@YAABIABI0@Z PROC			; std::_Min_value<unsigned int>, COMDAT

; 22   : 	{	// return smaller of _Left and _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 23   : 	return (_Right < _Left ? _Right : _Left);

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN3@Min_value
	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@Min_value
$LN3@Min_value:
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
$LN4@Min_value:
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]

; 24   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Min_value@I@std@@YAABIABI0@Z ENDP			; std::_Min_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<Connection>,std::_Vector_val<std::_Simple_types<Connection> >,1>::_Compressed_pair<std::allocator<Connection>,std::_Vector_val<std::_Simple_types<Connection> >,1><>, COMDAT
; _this$ = ecx

; 303  : 		{	// construct from forwarded values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@UConnection@@@std@@QAE@XZ ; std::allocator<Connection>::allocator<Connection>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<Connection> >::_Vector_val<std::_Simple_types<Connection> >

; 304  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0$$V@?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<Connection>,std::_Vector_val<std::_Simple_types<Connection> >,1>::_Compressed_pair<std::allocator<Connection>,std::_Vector_val<std::_Simple_types<Connection> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$destroy@UConnection@@@?$_Default_allocator_traits@V?$allocator@UConnection@@@std@@@std@@SAXAAV?$allocator@UConnection@@@1@QAUConnection@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@UConnection@@@?$_Default_allocator_traits@V?$allocator@UConnection@@@std@@@std@@SAXAAV?$allocator@UConnection@@@1@QAUConnection@@@Z PROC ; std::_Default_allocator_traits<std::allocator<Connection> >::destroy<Connection>, COMDAT

; 861  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 862  : 		_Ptr->~_Uty();
; 863  : 		}

	pop	ebp
	ret	0
??$destroy@UConnection@@@?$_Default_allocator_traits@V?$allocator@UConnection@@@std@@@std@@SAXAAV?$allocator@UConnection@@@1@QAUConnection@@@Z ENDP ; std::_Default_allocator_traits<std::allocator<Connection> >::destroy<Connection>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$construct@UConnection@@U1@@?$_Default_allocator_traits@V?$allocator@UConnection@@@std@@@std@@SAXAAV?$allocator@UConnection@@@1@QAUConnection@@$$QAU3@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UConnection@@U1@@?$_Default_allocator_traits@V?$allocator@UConnection@@@std@@@std@@SAXAAV?$allocator@UConnection@@@1@QAUConnection@@$$QAU3@@Z PROC ; std::_Default_allocator_traits<std::allocator<Connection> >::construct<Connection,Connection>, COMDAT

; 854  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 855  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	16					; 00000010H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@UConnection@@@std@@YA$$QAUConnection@@AAU1@@Z ; std::forward<Connection>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax

; 856  : 			_Objty(_STD forward<_Types>(_Args)...);
; 857  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@UConnection@@U1@@?$_Default_allocator_traits@V?$allocator@UConnection@@@std@@@std@@SAXAAV?$allocator@UConnection@@@1@QAUConnection@@$$QAU3@@Z ENDP ; std::_Default_allocator_traits<std::allocator<Connection> >::construct<Connection,Connection>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xstddef
;	COMDAT ??$_Unfancy@UConnection@@@std@@YAPAUConnection@@PAU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@UConnection@@@std@@YAPAUConnection@@PAU1@@Z PROC ; std::_Unfancy<Connection>, COMDAT

; 264  : 	{	// do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 265  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 266  : 	}

	pop	ebp
	ret	0
??$_Unfancy@UConnection@@@std@@YAPAUConnection@@PAU1@@Z ENDP ; std::_Unfancy<Connection>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@UConnection@@@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEX$$QAUConnection@@@Z
_TEXT	SEGMENT
tv136 = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@UConnection@@@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEX$$QAUConnection@@@Z PROC ; std::vector<Connection,std::allocator<Connection> >::_Emplace_back_with_unused_capacity<Connection>, COMDAT
; _this$ = ecx

; 927  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 928  : 			// Pre: _Has_unused_capacity()
; 929  : 		_Alty_traits::construct(this->_Getal(), _Unfancy(this->_Mylast()), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@UConnection@@@std@@YA$$QAUConnection@@AAU1@@Z ; std::forward<Connection>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Mylast
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$_Unfancy@UConnection@@@std@@YAPAUConnection@@PAU1@@Z ; std::_Unfancy<Connection>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAV?$allocator@UConnection@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Getal
	push	eax
	call	??$construct@UConnection@@U1@@?$_Default_allocator_traits@V?$allocator@UConnection@@@std@@@std@@SAXAAV?$allocator@UConnection@@@1@QAUConnection@@$$QAU3@@Z ; std::_Default_allocator_traits<std::allocator<Connection> >::construct<Connection,Connection>
	add	esp, 12					; 0000000cH

; 930  : 		_Orphan_range(this->_Mylast(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Mylast
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@ABEXPAUConnection@@0@Z ; std::vector<Connection,std::allocator<Connection> >::_Orphan_range

; 931  : 		++this->_Mylast();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Mylast
	mov	DWORD PTR tv136[ebp], eax
	mov	ecx, DWORD PTR tv136[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR tv136[ebp]
	mov	DWORD PTR [eax], edx

; 932  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back_with_unused_capacity@UConnection@@@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEX$$QAUConnection@@@Z ENDP ; std::vector<Connection,std::allocator<Connection> >::_Emplace_back_with_unused_capacity<Connection>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\type_traits
;	COMDAT ??$forward@UConnection@@@std@@YA$$QAUConnection@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UConnection@@@std@@YA$$QAUConnection@@AAU1@@Z PROC ; std::forward<Connection>, COMDAT

; 1591 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1592 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1593 : 	}

	pop	ebp
	ret	0
??$forward@UConnection@@@std@@YA$$QAUConnection@@AAU1@@Z ENDP ; std::forward<Connection>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ??$emplace_back@UConnection@@@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@$$QAUConnection@@@Z
_TEXT	SEGMENT
tv174 = -48						; size = 4
__Al$2 = -44						; size = 4
__Newvec$3 = -40					; size = 4
__Emplaced$4 = -33					; size = 1
__Newcapacity$5 = -32					; size = 4
__Newsize$6 = -28					; size = 4
__Oldsize$7 = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_<_Val_0>$ = 8						; size = 4
??$emplace_back@UConnection@@@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@$$QAUConnection@@@Z PROC ; std::vector<Connection,std::allocator<Connection> >::emplace_back<Connection>, COMDAT
; _this$ = ecx

; 937  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$emplace_back@UConnection@@@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@$$QAUConnection@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-48], eax
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 938  : 		if (_Has_unused_capacity())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_unused_capacity@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@ABE_NXZ ; std::vector<Connection,std::allocator<Connection> >::_Has_unused_capacity
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@emplace_ba

; 939  : 			{
; 940  : 			_Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	mov	ecx, DWORD PTR _<_Val_0>$[ebp]
	push	ecx
	call	??$forward@UConnection@@@std@@YA$$QAUConnection@@AAU1@@Z ; std::forward<Connection>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_back_with_unused_capacity@UConnection@@@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEX$$QAUConnection@@@Z ; std::vector<Connection,std::allocator<Connection> >::_Emplace_back_with_unused_capacity<Connection>

; 941  : 			}
; 942  : 		else

	jmp	$LN7@emplace_ba
$LN2@emplace_ba:

; 943  : 			{	// reallocate
; 944  : 			const size_type _Oldsize = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBEIXZ ; std::vector<Connection,std::allocator<Connection> >::size
	mov	DWORD PTR __Oldsize$7[ebp], eax

; 945  : 
; 946  : 			if (_Oldsize == max_size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBEIXZ ; std::vector<Connection,std::allocator<Connection> >::max_size
	cmp	DWORD PTR __Oldsize$7[ebp], eax
	jne	SHORT $LN4@emplace_ba

; 947  : 				{
; 948  : 				_Xlength();

	call	?_Xlength@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@CAXXZ ; std::vector<Connection,std::allocator<Connection> >::_Xlength
$LN4@emplace_ba:

; 949  : 				}
; 950  : 
; 951  : 			const size_type _Newsize = _Oldsize + 1;

	mov	edx, DWORD PTR __Oldsize$7[ebp]
	add	edx, 1
	mov	DWORD PTR __Newsize$6[ebp], edx

; 952  : 			const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	eax, DWORD PTR __Newsize$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@ABEII@Z ; std::vector<Connection,std::allocator<Connection> >::_Calculate_growth
	mov	DWORD PTR __Newcapacity$5[ebp], eax

; 953  : 			bool _Emplaced = false;

	mov	BYTE PTR __Emplaced$4[ebp], 0

; 954  : 			const pointer _Newvec = this->_Getal().allocate(_Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAV?$allocator@UConnection@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$allocator@UConnection@@@std@@QAEPAUConnection@@I@Z ; std::allocator<Connection>::allocate
	mov	DWORD PTR __Newvec$3[ebp], eax

; 955  : 			_Alty& _Al = this->_Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAV?$allocator@UConnection@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Getal
	mov	DWORD PTR __Al$2[ebp], eax

; 956  : 
; 957  : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 958  : 			_Alty_traits::construct(_Al, _Unfancy(_Newvec + _Oldsize), _STD forward<_Valty>(_Val)...);

	mov	edx, DWORD PTR __Oldsize$7[ebp]
	shl	edx, 4
	add	edx, DWORD PTR __Newvec$3[ebp]
	push	edx
	call	??$_Unfancy@UConnection@@@std@@YAPAUConnection@@PAU1@@Z ; std::_Unfancy<Connection>
	add	esp, 4
	mov	DWORD PTR tv174[ebp], eax
	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@UConnection@@@std@@YA$$QAUConnection@@AAU1@@Z ; std::forward<Connection>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv174[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$2[ebp]
	push	edx
	call	??$construct@UConnection@@U1@@?$_Default_allocator_traits@V?$allocator@UConnection@@@std@@@std@@SAXAAV?$allocator@UConnection@@@1@QAUConnection@@$$QAU3@@Z ; std::_Default_allocator_traits<std::allocator<Connection> >::construct<Connection,Connection>
	add	esp, 12					; 0000000cH

; 959  : 			_Emplaced = true;

	mov	BYTE PTR __Emplaced$4[ebp], 1

; 960  : 			_Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);

	mov	eax, DWORD PTR __Newvec$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Mylast
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove_if_noexcept@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEXPAUConnection@@00@Z ; std::vector<Connection,std::allocator<Connection> >::_Umove_if_noexcept
	jmp	SHORT $LN8@emplace_ba
__catch$??$emplace_back@UConnection@@@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@$$QAUConnection@@@Z$0:

; 961  : 			_CATCH_ALL
; 962  : 			if (_Emplaced)

	movzx	eax, BYTE PTR __Emplaced$4[ebp]
	test	eax, eax
	je	SHORT $LN6@emplace_ba

; 963  : 				{
; 964  : 				_Alty_traits::destroy(_Al, _Unfancy(_Newvec + _Oldsize));

	mov	ecx, DWORD PTR __Oldsize$7[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR __Newvec$3[ebp]
	push	ecx
	call	??$_Unfancy@UConnection@@@std@@YAPAUConnection@@PAU1@@Z ; std::_Unfancy<Connection>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Al$2[ebp]
	push	edx
	call	??$destroy@UConnection@@@?$_Default_allocator_traits@V?$allocator@UConnection@@@std@@@std@@SAXAAV?$allocator@UConnection@@@1@QAUConnection@@@Z ; std::_Default_allocator_traits<std::allocator<Connection> >::destroy<Connection>
	add	esp, 8
$LN6@emplace_ba:

; 965  : 				}
; 966  : 
; 967  : 			_Al.deallocate(_Newvec, _Newcapacity);

	mov	eax, DWORD PTR __Newcapacity$5[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$2[ebp]
	call	?deallocate@?$allocator@UConnection@@@std@@QAEXQAUConnection@@I@Z ; std::allocator<Connection>::deallocate

; 968  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 969  : 			_CATCH_END

	mov	eax, $LN11@emplace_ba
	ret	0
$LN8@emplace_ba:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$emplace_back@UConnection@@@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@$$QAUConnection@@@Z$1
$LN11@emplace_ba:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$emplace_back@UConnection@@@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@$$QAUConnection@@@Z$1:

; 970  : 
; 971  : 			_Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	edx, DWORD PTR __Newcapacity$5[ebp]
	push	edx
	mov	eax, DWORD PTR __Newsize$6[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Change_array@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEXQAUConnection@@II@Z ; std::vector<Connection,std::allocator<Connection> >::_Change_array
$LN7@emplace_ba:

; 972  : 			}
; 973  : 
; 974  : #if _HAS_CXX17
; 975  : 		return (this->_Mylast()[-1]);
; 976  : #endif /* _HAS_CXX17 */
; 977  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$emplace_back@UConnection@@@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@$$QAUConnection@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$emplace_back@UConnection@@@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@$$QAUConnection@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$emplace_back@UConnection@@@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@$$QAUConnection@@@Z ENDP ; std::vector<Connection,std::allocator<Connection> >::emplace_back<Connection>
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\type_traits
;	COMDAT ??$move@AAUConnection@@@std@@YA$$QAUConnection@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUConnection@@@std@@YA$$QAUConnection@@AAU1@@Z PROC ; std::move<Connection &>, COMDAT

; 1606 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1607 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1608 : 	}

	pop	ebp
	ret	0
??$move@AAUConnection@@@std@@YA$$QAUConnection@@AAU1@@Z ENDP ; std::move<Connection &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ??A?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@QBEABVNeuron@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@QBEABVNeuron@@I@Z PROC ; std::vector<Neuron,std::allocator<Neuron> >::operator[], COMDAT
; _this$ = ecx

; 1806 : 		{	// subscript nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1807 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1808 : 		if (size() <= _Pos)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@QBEIXZ ; std::vector<Neuron,std::allocator<Neuron> >::size
	cmp	eax, DWORD PTR __Pos$[ebp]
	ja	SHORT $LN2@operator

; 1809 : 			{	// report error
; 1810 : 			_DEBUG_ERROR("vector subscript out of range");

	push	1810					; 00000712H
	push	OFFSET ??_C@_1MO@PKCMDADL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
	push	0
	push	1810					; 00000712H
	push	OFFSET ??_C@_1MO@PKCMDADL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1JG@NBFEKNNI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAN?$AAe?$AAu?$AAr?$AAo?$AAn?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs@
	push	OFFSET ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator:

; 1811 : 			}
; 1812 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1813 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1814 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1815 : 
; 1816 : 		return (this->_Myfirst()[_Pos]);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@std@@QBEABQAVNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Neuron,std::allocator<Neuron> > >::_Myfirst
	imul	ecx, DWORD PTR __Pos$[ebp], 40
	add	ecx, DWORD PTR [eax]
	mov	eax, ecx

; 1817 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@QBEABVNeuron@@I@Z ENDP ; std::vector<Neuron,std::allocator<Neuron> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ??A?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@QAEAAVNeuron@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@QAEAAVNeuron@@I@Z PROC ; std::vector<Neuron,std::allocator<Neuron> >::operator[], COMDAT
; _this$ = ecx

; 1792 : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1793 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1794 : 		if (size() <= _Pos)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@QBEIXZ ; std::vector<Neuron,std::allocator<Neuron> >::size
	cmp	eax, DWORD PTR __Pos$[ebp]
	ja	SHORT $LN2@operator

; 1795 : 			{	// report error
; 1796 : 			_DEBUG_ERROR("vector subscript out of range");

	push	1796					; 00000704H
	push	OFFSET ??_C@_1MO@PKCMDADL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
	push	0
	push	1796					; 00000704H
	push	OFFSET ??_C@_1MO@PKCMDADL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1JG@NBFEKNNI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAN?$AAe?$AAu?$AAr?$AAo?$AAn?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs@
	push	OFFSET ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator:

; 1797 : 			}
; 1798 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1799 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1800 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1801 : 
; 1802 : 		return (this->_Myfirst()[_Pos]);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@std@@QAEAAPAVNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Neuron,std::allocator<Neuron> > >::_Myfirst
	imul	ecx, DWORD PTR __Pos$[ebp], 40
	add	ecx, DWORD PTR [eax]
	mov	eax, ecx

; 1803 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@QAEAAVNeuron@@I@Z ENDP ; std::vector<Neuron,std::allocator<Neuron> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?size@?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@QBEIXZ PROC ; std::vector<Neuron,std::allocator<Neuron> >::size, COMDAT
; _this$ = ecx

; 1764 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1765 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@std@@QBEABQAVNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Neuron,std::allocator<Neuron> > >::_Mylast
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@std@@QBEABQAVNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Neuron,std::allocator<Neuron> > >::_Myfirst
	mov	ecx, DWORD PTR [esi]
	sub	ecx, DWORD PTR [eax]
	mov	eax, ecx
	cdq
	mov	ecx, 40					; 00000028H
	idiv	ecx

; 1766 : 		}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@QBEIXZ ENDP ; std::vector<Neuron,std::allocator<Neuron> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@VNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@VNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<Neuron>,std::_Vector_val<std::_Simple_types<Neuron> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 342  : 		{	// return const reference to second

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 343  : 		return (_Myval2);

	mov	eax, DWORD PTR _this$[ebp]

; 344  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_second@?$_Compressed_pair@V?$allocator@VNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<Neuron>,std::_Vector_val<std::_Simple_types<Neuron> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@VNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@VNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<Neuron>,std::_Vector_val<std::_Simple_types<Neuron> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 337  : 		{	// return reference to second

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 338  : 		return (_Myval2);

	mov	eax, DWORD PTR _this$[ebp]

; 339  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_second@?$_Compressed_pair@V?$allocator@VNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<Neuron>,std::_Vector_val<std::_Simple_types<Neuron> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@std@@QBEABQAVNeuron@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@std@@QBEABQAVNeuron@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Neuron,std::allocator<Neuron> > >::_Mylast, COMDAT
; _this$ = ecx

; 624  : 		{	// return const reference to _Mylast

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 625  : 		return (_Get_data()._Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Neuron,std::allocator<Neuron> > >::_Get_data
	add	eax, 8

; 626  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@std@@QBEABQAVNeuron@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Neuron,std::allocator<Neuron> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@std@@QBEABQAVNeuron@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@std@@QBEABQAVNeuron@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Neuron,std::allocator<Neuron> > >::_Myfirst, COMDAT
; _this$ = ecx

; 614  : 		{	// return const reference to _Myfirst

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 615  : 		return (_Get_data()._Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Neuron,std::allocator<Neuron> > >::_Get_data
	add	eax, 4

; 616  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@std@@QBEABQAVNeuron@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Neuron,std::allocator<Neuron> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@std@@QAEAAPAVNeuron@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@std@@QAEAAPAVNeuron@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Neuron,std::allocator<Neuron> > >::_Myfirst, COMDAT
; _this$ = ecx

; 609  : 		{	// return reference to _Myfirst

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 610  : 		return (_Get_data()._Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Neuron,std::allocator<Neuron> > >::_Get_data
	add	eax, 4

; 611  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@std@@QAEAAPAVNeuron@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Neuron,std::allocator<Neuron> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Neuron,std::allocator<Neuron> > >::_Get_data, COMDAT
; _this$ = ecx

; 604  : 		{	// return const reference to _Vector_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 605  : 		return (_Mypair._Get_second());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_second@?$_Compressed_pair@V?$allocator@VNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<Neuron>,std::_Vector_val<std::_Simple_types<Neuron> >,1>::_Get_second

; 606  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Neuron,std::allocator<Neuron> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Neuron,std::allocator<Neuron> > >::_Get_data, COMDAT
; _this$ = ecx

; 599  : 		{	// return reference to _Vector_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 600  : 		return (_Mypair._Get_second());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_second@?$_Compressed_pair@V?$allocator@VNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<Neuron>,std::_Vector_val<std::_Simple_types<Neuron> >,1>::_Get_second

; 601  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@VNeuron@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Neuron,std::allocator<Neuron> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\uqac\iar\projetv2\projetiafinal\projet\neuron.cpp
_TEXT	SEGMENT
_n$1 = -16						; size = 4
_sum$ = -12						; size = 8
_this$ = -4						; size = 4
_nextLayer$ = 8						; size = 4
?SumDOW@Neuron@@ABENABV?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@Z PROC ; Neuron::SumDOW
; _this$ = ecx

; 91   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 92   : 	double sum = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _sum$[ebp], xmm0

; 93   : 
; 94   : 	//Sum our contributions of the error at the nodes we feed
; 95   : 
; 96   : 	for (unsigned n = 0; n < nextLayer.size() - 1; ++n)

	mov	DWORD PTR _n$1[ebp], 0
	jmp	SHORT $LN4@SumDOW
$LN2@SumDOW:
	mov	eax, DWORD PTR _n$1[ebp]
	add	eax, 1
	mov	DWORD PTR _n$1[ebp], eax
$LN4@SumDOW:
	mov	ecx, DWORD PTR _nextLayer$[ebp]
	call	?size@?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@QBEIXZ ; std::vector<Neuron,std::allocator<Neuron> >::size
	sub	eax, 1
	cmp	DWORD PTR _n$1[ebp], eax
	jae	SHORT $LN3@SumDOW

; 97   : 	{
; 98   : 		sum += m_outputWeights[n].weight * nextLayer[n].m_gradient;

	mov	ecx, DWORD PTR _n$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBEABUConnection@@I@Z ; std::vector<Connection,std::allocator<Connection> >::operator[]
	mov	esi, eax
	mov	edx, DWORD PTR _n$1[ebp]
	push	edx
	mov	ecx, DWORD PTR _nextLayer$[ebp]
	call	??A?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@QBEABVNeuron@@I@Z ; std::vector<Neuron,std::allocator<Neuron> >::operator[]
	movsd	xmm0, QWORD PTR [esi]
	mulsd	xmm0, QWORD PTR [eax+32]
	addsd	xmm0, QWORD PTR _sum$[ebp]
	movsd	QWORD PTR _sum$[ebp], xmm0

; 99   : 	}

	jmp	SHORT $LN2@SumDOW
$LN3@SumDOW:

; 100  : 
; 101  : 	return sum;

	fld	QWORD PTR _sum$[ebp]

; 102  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SumDOW@Neuron@@ABENABV?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@Z ENDP ; Neuron::SumDOW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\uqac\iar\projetv2\projetiafinal\projet\neuron.cpp
_TEXT	SEGMENT
tv69 = -8						; size = 8
_x$ = 8							; size = 8
?TransferFunctionDerivative@Neuron@@CANN@Z PROC		; Neuron::TransferFunctionDerivative

; 73   : double Neuron::TransferFunctionDerivative(double x) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 74   : 	//tanh approximated derivative
; 75   : 	return 1.0 - x * x;

	movsd	xmm0, QWORD PTR _x$[ebp]
	mulsd	xmm0, QWORD PTR _x$[ebp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, xmm0
	movsd	QWORD PTR tv69[ebp], xmm1
	fld	QWORD PTR tv69[ebp]

; 76   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?TransferFunctionDerivative@Neuron@@CANN@Z ENDP		; Neuron::TransferFunctionDerivative
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\uqac\iar\projetv2\projetiafinal\projet\neuron.cpp
_TEXT	SEGMENT
_x$ = 8							; size = 8
?TransferFunction@Neuron@@CANN@Z PROC			; Neuron::TransferFunction

; 67   : {

	push	ebp
	mov	ebp, esp

; 68   : 	//hyperbolic transfer function 
; 69   : 	// tanh - output range [-1.0..1.0]
; 70   : 	return tanh(x);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_tanh
	add	esp, 8

; 71   : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?TransferFunction@Neuron@@CANN@Z ENDP			; Neuron::TransferFunction
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?_Orphan_range@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@ABEXPAUConnection@@0@Z
_TEXT	SEGMENT
__Pnext$ = -32						; size = 4
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@ABEXPAUConnection@@0@Z PROC ; std::vector<Connection,std::allocator<Connection> >::_Orphan_range, COMDAT
; _this$ = ecx

; 2027 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_range@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@ABEXPAUConnection@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2028 : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2029 : 
; 2030 : 		const_iterator ** _Pnext = reinterpret_cast<const_iterator **>(this->_Getpfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Getpfirst
	mov	DWORD PTR __Pnext$[ebp], eax

; 2031 : 
; 2032 : 		if (_Pnext)

	cmp	DWORD PTR __Pnext$[ebp], 0
	je	SHORT $LN4@Orphan_ran
$LN2@Orphan_ran:

; 2033 : 			{
; 2034 : 			while (*_Pnext)

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN4@Orphan_ran

; 2035 : 				{
; 2036 : 				if ((*_Pnext)->_Ptr < _First || _Last < (*_Pnext)->_Ptr)

	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR __First$[ebp]
	jb	SHORT $LN7@Orphan_ran
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN5@Orphan_ran
$LN7@Orphan_ran:

; 2037 : 					{	// skip the iterator
; 2038 : 					_Pnext = reinterpret_cast<const_iterator **>((*_Pnext)->_Getpnext());

	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	DWORD PTR __Pnext$[ebp], eax

; 2039 : 					}
; 2040 : 				else

	jmp	SHORT $LN6@Orphan_ran
$LN5@Orphan_ran:

; 2041 : 					{	// orphan the iterator
; 2042 : 					(*_Pnext)->_Clrcont();

	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Clrcont

; 2043 : 					*_Pnext = *reinterpret_cast<const_iterator **>((*_Pnext)->_Getpnext());

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
$LN6@Orphan_ran:

; 2044 : 					}
; 2045 : 				}

	jmp	SHORT $LN2@Orphan_ran
$LN4@Orphan_ran:

; 2046 : 			}
; 2047 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@Orphan_ran
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN13@Orphan_ran:
	DD	1
	DD	$LN12@Orphan_ran
$LN12@Orphan_ran:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN10@Orphan_ran
$LN10@Orphan_ran:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@ABEXPAUConnection@@0@Z$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$?_Orphan_range@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@ABEXPAUConnection@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@ABEXPAUConnection@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_range@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@ABEXPAUConnection@@0@Z ENDP ; std::vector<Connection,std::allocator<Connection> >::_Orphan_range
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?_Xlength@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@CAXXZ PROC ; std::vector<Connection,std::allocator<Connection> >::_Xlength, COMDAT

; 2016 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp

; 2017 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 2018 : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Xlength@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@CAXXZ ENDP ; std::vector<Connection,std::allocator<Connection> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?_Tidy@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEXXZ PROC ; std::vector<Connection,std::allocator<Connection> >::_Tidy, COMDAT
; _this$ = ecx

; 2001 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2002 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Orphan_all

; 2003 : 
; 2004 : 		if (this->_Myfirst() != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myfirst
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Tidy

; 2005 : 			{	// destroy and deallocate old array
; 2006 : 			_Destroy(this->_Myfirst(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEXPAUConnection@@0@Z ; std::vector<Connection,std::allocator<Connection> >::_Destroy

; 2007 : 			this->_Getal().deallocate(this->_Myfirst(), capacity());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBEIXZ ; std::vector<Connection,std::allocator<Connection> >::capacity
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAV?$allocator@UConnection@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$allocator@UConnection@@@std@@QAEXQAUConnection@@I@Z ; std::allocator<Connection>::deallocate

; 2008 : 
; 2009 : 			this->_Myfirst() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myfirst
	mov	DWORD PTR [eax], 0

; 2010 : 			this->_Mylast() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Mylast
	mov	DWORD PTR [eax], 0

; 2011 : 			this->_Myend() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myend
	mov	DWORD PTR [eax], 0
$LN1@Tidy:

; 2012 : 			}
; 2013 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEXXZ ENDP ; std::vector<Connection,std::allocator<Connection> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?_Change_array@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEXQAUConnection@@II@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEXQAUConnection@@II@Z PROC ; std::vector<Connection,std::allocator<Connection> >::_Change_array, COMDAT
; _this$ = ecx

; 1986 : 		{	// orphan all iterators, discard old array, acquire new array

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1987 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Orphan_all

; 1988 : 
; 1989 : 		if (this->_Myfirst() != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myfirst
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Change_arr

; 1990 : 			{	// destroy and deallocate old array
; 1991 : 			_Destroy(this->_Myfirst(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEXPAUConnection@@0@Z ; std::vector<Connection,std::allocator<Connection> >::_Destroy

; 1992 : 			this->_Getal().deallocate(this->_Myfirst(), capacity());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBEIXZ ; std::vector<Connection,std::allocator<Connection> >::capacity
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAV?$allocator@UConnection@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$allocator@UConnection@@@std@@QAEXQAUConnection@@I@Z ; std::allocator<Connection>::deallocate
$LN2@Change_arr:

; 1993 : 			}
; 1994 : 
; 1995 : 		this->_Myfirst() = _Newvec;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myfirst
	mov	ecx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR [eax], ecx

; 1996 : 		this->_Mylast() = _Newvec + _Newsize;

	mov	esi, DWORD PTR __Newsize$[ebp]
	shl	esi, 4
	add	esi, DWORD PTR __Newvec$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Mylast
	mov	DWORD PTR [eax], esi

; 1997 : 		this->_Myend() = _Newvec + _Newcapacity;

	mov	esi, DWORD PTR __Newcapacity$[ebp]
	shl	esi, 4
	add	esi, DWORD PTR __Newvec$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myend
	mov	DWORD PTR [eax], esi

; 1998 : 		}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Change_array@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEXQAUConnection@@II@Z ENDP ; std::vector<Connection,std::allocator<Connection> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?_Calculate_growth@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@ABEII@Z
_TEXT	SEGMENT
__Geometric$ = -12					; size = 4
__Oldcapacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@ABEII@Z PROC ; std::vector<Connection,std::allocator<Connection> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1944 : 		{	// given _Oldcapacity and _Newsize, calculate geometric growth

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1945 : 		const size_type _Oldcapacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBEIXZ ; std::vector<Connection,std::allocator<Connection> >::capacity
	mov	DWORD PTR __Oldcapacity$[ebp], eax

; 1946 : 
; 1947 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBEIXZ ; std::vector<Connection,std::allocator<Connection> >::max_size
	mov	ecx, DWORD PTR __Oldcapacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	DWORD PTR __Oldcapacity$[ebp], eax
	jbe	SHORT $LN2@Calculate_

; 1948 : 			{
; 1949 : 			return (_Newsize);	// geometric growth would overflow

	mov	eax, DWORD PTR __Newsize$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1950 : 			}
; 1951 : 
; 1952 : 		const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	mov	edx, DWORD PTR __Oldcapacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Oldcapacity$[ebp]
	mov	DWORD PTR __Geometric$[ebp], edx

; 1953 : 
; 1954 : 		if (_Geometric < _Newsize)

	mov	eax, DWORD PTR __Geometric$[ebp]
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@Calculate_

; 1955 : 			{
; 1956 : 			return (_Newsize);	// geometric growth would be insufficient

	mov	eax, DWORD PTR __Newsize$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1957 : 			}
; 1958 : 
; 1959 : 		return (_Geometric);	// geometric growth is sufficient

	mov	eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1960 : 		}

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Calculate_growth@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@ABEII@Z ENDP ; std::vector<Connection,std::allocator<Connection> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?_Destroy@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEXPAUConnection@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEXPAUConnection@@0@Z PROC ; std::vector<Connection,std::allocator<Connection> >::_Destroy, COMDAT
; _this$ = ecx

; 1939 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1940 : 		_Destroy_range(_First, _Last, this->_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAV?$allocator@UConnection@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Destroy_range@V?$allocator@UConnection@@@std@@@std@@YAXPAUConnection@@0AAV?$allocator@UConnection@@@0@@Z ; std::_Destroy_range<std::allocator<Connection> >
	add	esp, 12					; 0000000cH

; 1941 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEXPAUConnection@@0@Z ENDP ; std::vector<Connection,std::allocator<Connection> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEXPAUConnection@@00@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEXPAUConnection@@00@Z PROC ; std::vector<Connection,std::allocator<Connection> >::_Umove_if_noexcept, COMDAT
; _this$ = ecx

; 1933 : 		{	// move_if_noexcept [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1934 : 		_Umove_if_noexcept1(_First, _Last, _Dest,

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove_if_noexcept1@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEXPAUConnection@@00U?$integral_constant@_N$00@2@@Z ; std::vector<Connection,std::allocator<Connection> >::_Umove_if_noexcept1

; 1935 : 			_Disjunction_t<is_nothrow_move_constructible<_Ty>, negation<is_copy_constructible<_Ty>>>{});
; 1936 : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Umove_if_noexcept@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEXPAUConnection@@00@Z ENDP ; std::vector<Connection,std::allocator<Connection> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEXPAUConnection@@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEXPAUConnection@@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<Connection,std::allocator<Connection> >::_Umove_if_noexcept1, COMDAT
; _this$ = ecx

; 1923 : 		{	// move [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1924 : 		_Uninitialized_move(_First, _Last, _Dest, this->_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAV?$allocator@UConnection@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninitialized_move@PAUConnection@@PAU1@V?$allocator@UConnection@@@std@@@std@@YAPAUConnection@@PAU1@00AAV?$allocator@UConnection@@@0@@Z ; std::_Uninitialized_move<Connection *,Connection *,std::allocator<Connection> >
	add	esp, 16					; 00000010H

; 1925 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?_Umove_if_noexcept1@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEXPAUConnection@@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<Connection,std::allocator<Connection> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?back@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAEAAUConnection@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?back@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAEAAUConnection@@XZ PROC ; std::vector<Connection,std::allocator<Connection> >::back, COMDAT
; _this$ = ecx

; 1868 : 		{	// return last element of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1869 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1870 : 		if (empty())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?empty@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBE_NXZ ; std::vector<Connection,std::allocator<Connection> >::empty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@back

; 1871 : 			{	// report error
; 1872 : 			_DEBUG_ERROR("back() called on empty vector");

	push	1872					; 00000750H
	push	OFFSET ??_C@_1MO@PKCMDADL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DM@ONDPIFDL@?$AAb?$AAa?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAn?$AA?5?$AAe?$AAm?$AAp?$AAt?$AAy?$AA?5?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
	push	0
	push	1872					; 00000750H
	push	OFFSET ??_C@_1MO@PKCMDADL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1JM@CJDGKBLO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?0?$AAc?$AAl@
	push	OFFSET ??_C@_1EA@OBAHGFFK@?$AA?$CC?$AAb?$AAa?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAn?$AA?5?$AAe?$AAm?$AAp?$AAt?$AAy?$AA?5?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@back:

; 1873 : 			}
; 1874 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1875 : 		_SCL_SECURE_VALIDATE_RANGE(!empty());
; 1876 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1877 : 
; 1878 : 		return (this->_Mylast()[-1]);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Mylast
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, -1
	add	edx, DWORD PTR [eax]
	mov	eax, edx

; 1879 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?back@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAEAAUConnection@@XZ ENDP ; std::vector<Connection,std::allocator<Connection> >::back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ??A?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBEABUConnection@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBEABUConnection@@I@Z PROC ; std::vector<Connection,std::allocator<Connection> >::operator[], COMDAT
; _this$ = ecx

; 1806 : 		{	// subscript nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1807 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1808 : 		if (size() <= _Pos)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBEIXZ ; std::vector<Connection,std::allocator<Connection> >::size
	cmp	eax, DWORD PTR __Pos$[ebp]
	ja	SHORT $LN2@operator

; 1809 : 			{	// report error
; 1810 : 			_DEBUG_ERROR("vector subscript out of range");

	push	1810					; 00000712H
	push	OFFSET ??_C@_1MO@PKCMDADL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
	push	0
	push	1810					; 00000712H
	push	OFFSET ??_C@_1MO@PKCMDADL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1KK@JHMDJAOJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?0?$AAc?$AAl@
	push	OFFSET ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator:

; 1811 : 			}
; 1812 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1813 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1814 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1815 : 
; 1816 : 		return (this->_Myfirst()[_Pos]);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABQAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myfirst
	mov	ecx, DWORD PTR __Pos$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR [eax]
	mov	eax, ecx

; 1817 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBEABUConnection@@I@Z ENDP ; std::vector<Connection,std::allocator<Connection> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ??A?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAEAAUConnection@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAEAAUConnection@@I@Z PROC ; std::vector<Connection,std::allocator<Connection> >::operator[], COMDAT
; _this$ = ecx

; 1792 : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1793 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1794 : 		if (size() <= _Pos)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBEIXZ ; std::vector<Connection,std::allocator<Connection> >::size
	cmp	eax, DWORD PTR __Pos$[ebp]
	ja	SHORT $LN2@operator

; 1795 : 			{	// report error
; 1796 : 			_DEBUG_ERROR("vector subscript out of range");

	push	1796					; 00000704H
	push	OFFSET ??_C@_1MO@PKCMDADL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
	push	0
	push	1796					; 00000704H
	push	OFFSET ??_C@_1MO@PKCMDADL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1KK@JHMDJAOJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?0?$AAc?$AAl@
	push	OFFSET ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator:

; 1797 : 			}
; 1798 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1799 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1800 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1801 : 
; 1802 : 		return (this->_Myfirst()[_Pos]);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myfirst
	mov	ecx, DWORD PTR __Pos$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR [eax]
	mov	eax, ecx

; 1803 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAEAAUConnection@@I@Z ENDP ; std::vector<Connection,std::allocator<Connection> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?_Has_unused_capacity@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@ABE_NXZ
_TEXT	SEGMENT
tv77 = -8						; size = 4
_this$ = -4						; size = 4
?_Has_unused_capacity@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@ABE_NXZ PROC ; std::vector<Connection,std::allocator<Connection> >::_Has_unused_capacity, COMDAT
; _this$ = ecx

; 1786 : 		{	// micro-optimization for capacity() != size()

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1787 : 		return (this->_Myend() != this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABQAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myend
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABQAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Mylast
	mov	ecx, DWORD PTR [esi]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN3@Has_unused
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN4@Has_unused
$LN3@Has_unused:
	mov	DWORD PTR tv77[ebp], 0
$LN4@Has_unused:
	mov	al, BYTE PTR tv77[ebp]

; 1788 : 		}

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Has_unused_capacity@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@ABE_NXZ ENDP ; std::vector<Connection,std::allocator<Connection> >::_Has_unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?capacity@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBEIXZ PROC ; std::vector<Connection,std::allocator<Connection> >::capacity, COMDAT
; _this$ = ecx

; 1775 : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1776 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABQAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myend
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABQAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myfirst
	mov	ecx, DWORD PTR [esi]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 4
	mov	eax, ecx

; 1777 : 		}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBEIXZ ENDP ; std::vector<Connection,std::allocator<Connection> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?max_size@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBEIXZ PROC ; std::vector<Connection,std::allocator<Connection> >::max_size, COMDAT
; _this$ = ecx

; 1769 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1770 : 		return (_Min_value(static_cast<size_type>((numeric_limits<difference_type>::max)()),

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABV?$allocator@UConnection@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@UConnection@@@std@@@std@@SAIABV?$allocator@UConnection@@@2@@Z ; std::_Default_allocator_traits<std::allocator<Connection> >::max_size
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR $T1[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Min_value@I@std@@YAABIABI0@Z	; std::_Min_value<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 1771 : 			_Alty_traits::max_size(this->_Getal())));
; 1772 : 		}

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBEIXZ ENDP ; std::vector<Connection,std::allocator<Connection> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?size@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBEIXZ PROC ; std::vector<Connection,std::allocator<Connection> >::size, COMDAT
; _this$ = ecx

; 1764 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1765 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABQAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Mylast
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABQAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myfirst
	mov	ecx, DWORD PTR [esi]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 4
	mov	eax, ecx

; 1766 : 		}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBEIXZ ENDP ; std::vector<Connection,std::allocator<Connection> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?empty@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
tv77 = -8						; size = 4
_this$ = -4						; size = 4
?empty@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBE_NXZ PROC ; std::vector<Connection,std::allocator<Connection> >::empty, COMDAT
; _this$ = ecx

; 1759 : 		{	// test if sequence is empty

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1760 : 		return (this->_Myfirst() == this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABQAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myfirst
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABQAUConnection@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Mylast
	mov	ecx, DWORD PTR [esi]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN3@empty
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN4@empty
$LN3@empty:
	mov	DWORD PTR tv77[ebp], 0
$LN4@empty:
	mov	al, BYTE PTR tv77[ebp]

; 1761 : 		}

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?empty@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBE_NXZ ENDP ; std::vector<Connection,std::allocator<Connection> >::empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?push_back@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAEX$$QAUConnection@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAEX$$QAUConnection@@@Z PROC ; std::vector<Connection,std::allocator<Connection> >::push_back, COMDAT
; _this$ = ecx

; 985  : 		{	// insert by moving into element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 986  : 		emplace_back(_STD move(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$move@AAUConnection@@@std@@YA$$QAUConnection@@AAU1@@Z ; std::move<Connection &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$emplace_back@UConnection@@@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@$$QAUConnection@@@Z ; std::vector<Connection,std::allocator<Connection> >::emplace_back<Connection>

; 987  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAEX$$QAUConnection@@@Z ENDP ; std::vector<Connection,std::allocator<Connection> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ??1?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@XZ PROC ; std::vector<Connection,std::allocator<Connection> >::~vector<Connection,std::allocator<Connection> >, COMDAT
; _this$ = ecx

; 920  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 921  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@AAEXXZ ; std::vector<Connection,std::allocator<Connection> >::_Tidy

; 922  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::~_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@XZ ENDP ; std::vector<Connection,std::allocator<Connection> >::~vector<Connection,std::allocator<Connection> >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ??0?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@XZ PROC ; std::vector<Connection,std::allocator<Connection> >::vector<Connection,std::allocator<Connection> >, COMDAT
; _this$ = ecx

; 685  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 684  : 		: _Mybase()

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >

; 686  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@XZ ENDP ; std::vector<Connection,std::allocator<Connection> >::vector<Connection,std::allocator<Connection> >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<Connection>,std::_Vector_val<std::_Simple_types<Connection> >,1>::~_Compressed_pair<std::allocator<Connection>,std::_Vector_val<std::_Simple_types<Connection> >,1>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<Connection>,std::_Vector_val<std::_Simple_types<Connection> >,1>::~_Compressed_pair<std::allocator<Connection>,std::_Vector_val<std::_Simple_types<Connection> >,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<Connection>,std::_Vector_val<std::_Simple_types<Connection> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 342  : 		{	// return const reference to second

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 343  : 		return (_Myval2);

	mov	eax, DWORD PTR _this$[ebp]

; 344  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_second@?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<Connection>,std::_Vector_val<std::_Simple_types<Connection> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<Connection>,std::_Vector_val<std::_Simple_types<Connection> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 337  : 		{	// return reference to second

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 338  : 		return (_Myval2);

	mov	eax, DWORD PTR _this$[ebp]

; 339  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_second@?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<Connection>,std::_Vector_val<std::_Simple_types<Connection> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QBEABV?$allocator@UConnection@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QBEABV?$allocator@UConnection@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<Connection>,std::_Vector_val<std::_Simple_types<Connection> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 322  : 		{	// return const reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 323  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 324  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QBEABV?$allocator@UConnection@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<Connection>,std::_Vector_val<std::_Simple_types<Connection> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QAEAAV?$allocator@UConnection@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QAEAAV?$allocator@UConnection@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<Connection>,std::_Vector_val<std::_Simple_types<Connection> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 317  : 		{	// return reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 318  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 319  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QAEAAV?$allocator@UConnection@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<Connection>,std::_Vector_val<std::_Simple_types<Connection> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<Connection> >::~_Vector_val<std::_Simple_types<Connection> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<Connection> >::~_Vector_val<std::_Simple_types<Connection> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<Connection> >::_Vector_val<std::_Simple_types<Connection> >, COMDAT
; _this$ = ecx

; 437  : 		{	// initialize values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12

; 434  : 		: _Myfirst(),

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 435  : 		_Mylast(),

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 436  : 		_Myend()

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 438  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<Connection> >::_Vector_val<std::_Simple_types<Connection> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABQAUConnection@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABQAUConnection@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myend, COMDAT
; _this$ = ecx

; 634  : 		{	// return const reference to _Myend

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Get_data()._Myend);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Get_data
	add	eax, 12					; 0000000cH

; 636  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABQAUConnection@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myend, COMDAT
; _this$ = ecx

; 629  : 		{	// return reference to _Myend

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return (_Get_data()._Myend);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Get_data
	add	eax, 12					; 0000000cH

; 631  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABQAUConnection@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABQAUConnection@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Mylast, COMDAT
; _this$ = ecx

; 624  : 		{	// return const reference to _Mylast

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 625  : 		return (_Get_data()._Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Get_data
	add	eax, 8

; 626  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABQAUConnection@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Mylast, COMDAT
; _this$ = ecx

; 619  : 		{	// return reference to _Mylast

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 620  : 		return (_Get_data()._Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Get_data
	add	eax, 8

; 621  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABQAUConnection@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABQAUConnection@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myfirst, COMDAT
; _this$ = ecx

; 614  : 		{	// return const reference to _Myfirst

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 615  : 		return (_Get_data()._Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Get_data
	add	eax, 4

; 616  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABQAUConnection@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myfirst, COMDAT
; _this$ = ecx

; 609  : 		{	// return reference to _Myfirst

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 610  : 		return (_Get_data()._Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Get_data
	add	eax, 4

; 611  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAUConnection@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Get_data, COMDAT
; _this$ = ecx

; 604  : 		{	// return const reference to _Vector_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 605  : 		return (_Mypair._Get_second());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_second@?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<Connection>,std::_Vector_val<std::_Simple_types<Connection> >,1>::_Get_second

; 606  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Get_data, COMDAT
; _this$ = ecx

; 599  : 		{	// return reference to _Vector_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 600  : 		return (_Mypair._Get_second());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_second@?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<Connection>,std::_Vector_val<std::_Simple_types<Connection> >,1>::_Get_second

; 601  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABV?$allocator@UConnection@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABV?$allocator@UConnection@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Getal, COMDAT
; _this$ = ecx

; 594  : 		{	// return const reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 595  : 		return (_Mypair._Get_first());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QBEABV?$allocator@UConnection@@@2@XZ ; std::_Compressed_pair<std::allocator<Connection>,std::_Vector_val<std::_Simple_types<Connection> >,1>::_Get_first

; 596  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABV?$allocator@UConnection@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAV?$allocator@UConnection@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAV?$allocator@UConnection@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Getal, COMDAT
; _this$ = ecx

; 589  : 		{	// return reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 590  : 		return (_Mypair._Get_first());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QAEAAV?$allocator@UConnection@@@2@XZ ; std::_Compressed_pair<std::allocator<Connection>,std::_Vector_val<std::_Simple_types<Connection> >,1>::_Get_first

; 591  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAV?$allocator@UConnection@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 579  : 		{	// orphan all iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 580  : 		_Get_data()._Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Get_data
	mov	ecx, eax
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 581  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myproxy, COMDAT
; _this$ = ecx

; 568  : 		{	// return reference to _Myproxy

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 569  : 		return (_Get_data()._Myproxy);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Get_data

; 570  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myproxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Getpfirst, COMDAT
; _this$ = ecx

; 563  : 		{	// get address of iterator chain

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		return (_Get_data()._Getpfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Get_data
	mov	ecx, eax
	call	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst

; 565  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Getpfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Proxy_allocator$ = -9					; size = 1
_this$ = -4						; size = 4
?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Free_proxy, COMDAT
; _this$ = ecx

; 554  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 555  : 		_Alproxy _Proxy_allocator(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAV?$allocator@UConnection@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Getal
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	??$?0UConnection@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UConnection@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Connection>

; 556  : 		_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Orphan_all

; 557  : 		_Alproxy_traits::destroy(_Proxy_allocator, _Myproxy());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myproxy
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	push	ecx
	call	??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
	add	esp, 8

; 558  : 		_Deallocate_plain(_Proxy_allocator, _Myproxy());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myproxy
	mov	edx, DWORD PTR [eax]
	push	edx
	lea	eax, DWORD PTR __Proxy_allocator$[ebp]
	push	eax
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
	add	esp, 8

; 559  : 		_Myproxy() = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myproxy
	mov	DWORD PTR [eax], 0

; 560  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Free_proxy
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@Free_proxy:
	DD	1
	DD	$LN4@Free_proxy
$LN4@Free_proxy:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@Free_proxy
$LN3@Free_proxy:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -24						; size = 8
__Proxy_allocator$ = -9					; size = 1
_this$ = -4						; size = 4
?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 546  : 		{	// construct proxy

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 547  : 		_Alproxy _Proxy_allocator(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAV?$allocator@UConnection@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Getal
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	??$?0UConnection@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UConnection@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Connection>

; 548  : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

	push	1
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	push	eax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myproxy
	mov	DWORD PTR [eax], esi

; 549  : 		_Alproxy_traits::construct(_Proxy_allocator, _Myproxy(), _Container_proxy());

	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myproxy
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	push	ecx
	call	??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
	add	esp, 12					; 0000000cH

; 550  : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Get_data
	push	eax
	call	??$addressof@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<Connection> > >
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Myproxy
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [edx], esi

; 551  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Alloc_prox
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@Alloc_prox:
	DD	1
	DD	$LN4@Alloc_prox
$LN4@Alloc_prox:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@Alloc_prox
$LN3@Alloc_prox:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ??1?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::~_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >, COMDAT
; _this$ = ecx

; 505  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 506  : 		_Free_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Free_proxy

; 507  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::~_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >, COMDAT
; _this$ = ecx

; 491  : 		{	// default construct allocator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 490  : 		: _Mypair(_Zero_then_variadic_args_t())

	movzx	eax, BYTE PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<Connection>,std::_Vector_val<std::_Simple_types<Connection> >,1>::_Compressed_pair<std::allocator<Connection>,std::_Vector_val<std::_Simple_types<Connection> >,1><>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 492  : 		_Alloc_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Alloc_proxy

; 493  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Compressed_pair@V?$allocator@UConnection@@@std@@V?$_Vector_val@U?$_Simple_types@UConnection@@@std@@@2@$00@std@@QAE@XZ
__ehhandler$??0?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_alloc@U?$_Vec_base_types@UConnection@@V?$allocator@UConnection@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >::_Vector_alloc<std::_Vec_base_types<Connection,std::allocator<Connection> > >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@UConnection@@@std@@@std@@SAIABV?$allocator@UConnection@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@UConnection@@@std@@@std@@SAIABV?$allocator@UConnection@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<Connection> >::max_size, COMDAT

; 866  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 867  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

	mov	eax, 268435455				; 0fffffffH

; 868  : 		}

	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@UConnection@@@std@@@std@@SAIABV?$allocator@UConnection@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<Connection> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ?allocate@?$allocator@UConnection@@@std@@QAEPAUConnection@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UConnection@@@std@@QAEPAUConnection@@I@Z PROC ; std::allocator<Connection>::allocate, COMDAT
; _this$ = ecx

; 945  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 946  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof(_Ty))));

	push	1
	push	16					; 00000010H
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	?_Allocate@std@@YAPAXII_N@Z		; std::_Allocate
	add	esp, 12					; 0000000cH

; 947  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@UConnection@@@std@@QAEPAUConnection@@I@Z ENDP ; std::allocator<Connection>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ?deallocate@?$allocator@UConnection@@@std@@QAEXQAUConnection@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@UConnection@@@std@@QAEXQAUConnection@@I@Z PROC ; std::allocator<Connection>::deallocate, COMDAT
; _this$ = ecx

; 940  : 		{	// deallocate object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 941  : 		_Deallocate(_Ptr, _Count, sizeof(_Ty));

	push	16					; 00000010H
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH

; 942  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@UConnection@@@std@@QAEXQAUConnection@@I@Z ENDP ; std::allocator<Connection>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??0?$allocator@UConnection@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UConnection@@@std@@QAE@XZ PROC		; std::allocator<Connection>::allocator<Connection>, COMDAT
; _this$ = ecx

; 929  : 	allocator() _NOEXCEPT

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 930  : 		{	// construct default allocator (do nothing)
; 931  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@UConnection@@@std@@QAE@XZ ENDP		; std::allocator<Connection>::allocator<Connection>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\uqac\iar\projetv2\projetiafinal\projet\neuron.h
;	COMDAT ?RandomWeight@Neuron@@CANXZ
_TEXT	SEGMENT
tv69 = -8						; size = 8
?RandomWeight@Neuron@@CANXZ PROC			; Neuron::RandomWeight, COMDAT

; 31   : 	static double RandomWeight(void) { return rand() / double(RAND_MAX); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	call	_rand
	cvtsi2sd xmm0, eax
	divsd	xmm0, QWORD PTR __real@40dfffc000000000
	movsd	QWORD PTR tv69[ebp], xmm0
	fld	QWORD PTR tv69[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RandomWeight@Neuron@@CANXZ ENDP			; Neuron::RandomWeight
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\uqac\iar\projetv2\projetiafinal\projet\neuron.cpp
_TEXT	SEGMENT
tv128 = -40						; size = 4
tv142 = -36						; size = 8
_newDeltaWeight$1 = -28					; size = 8
_oldDeltaWeight$2 = -20					; size = 8
_neuron$3 = -12						; size = 4
_n$4 = -8						; size = 4
_this$ = -4						; size = 4
_prevLayer$ = 8						; size = 4
?UpdateInputWeights@Neuron@@QAEXAAV?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@Z PROC ; Neuron::UpdateInputWeights
; _this$ = ecx

; 28   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 29   : 	// The weights to be updated are in the connection container
; 30   : 	// in the neurons in the preceding layer
; 31   : 
; 32   : 	for (unsigned n = 0; n < prevLayer.size(); ++n)

	mov	DWORD PTR _n$4[ebp], 0
	jmp	SHORT $LN4@UpdateInpu
$LN2@UpdateInpu:
	mov	eax, DWORD PTR _n$4[ebp]
	add	eax, 1
	mov	DWORD PTR _n$4[ebp], eax
$LN4@UpdateInpu:
	mov	ecx, DWORD PTR _prevLayer$[ebp]
	call	?size@?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@QBEIXZ ; std::vector<Neuron,std::allocator<Neuron> >::size
	cmp	DWORD PTR _n$4[ebp], eax
	jae	$LN3@UpdateInpu

; 33   : 	{
; 34   : 		Neuron &neuron = prevLayer[n];

	mov	ecx, DWORD PTR _n$4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _prevLayer$[ebp]
	call	??A?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@QAEAAVNeuron@@I@Z ; std::vector<Neuron,std::allocator<Neuron> >::operator[]
	mov	DWORD PTR _neuron$3[ebp], eax

; 35   : 		double oldDeltaWeight = neuron.m_outputWeights[m_myIndex].deltaWeight;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _neuron$3[ebp]
	add	ecx, 8
	call	??A?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAEAAUConnection@@I@Z ; std::vector<Connection,std::allocator<Connection> >::operator[]
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR _oldDeltaWeight$2[ebp], xmm0

; 36   : 
; 37   : 		double newDeltaWeight =
; 38   : 			//Individual input, magnified by the gradient and train rate
; 39   : 			eta // learning rate (0.0 - slow learner, 0.2 - medium learner, 1.0 - reckless learner
; 40   : 			* neuron.GetOutputVal()
; 41   : 			* m_gradient
; 42   : 			// Also add momentum = a fraction of the previous delta weight
; 43   : 			+ alpha

	mov	ecx, DWORD PTR _neuron$3[ebp]
	call	?GetOutputVal@Neuron@@QBENXZ		; Neuron::GetOutputVal
	fstp	QWORD PTR tv142[ebp]
	movsd	xmm0, QWORD PTR tv142[ebp]
	mulsd	xmm0, QWORD PTR ?eta@Neuron@@0NA
	mov	ecx, DWORD PTR _this$[ebp]
	mulsd	xmm0, QWORD PTR [ecx+32]
	movsd	xmm1, QWORD PTR ?alpha@Neuron@@0NA
	mulsd	xmm1, QWORD PTR _oldDeltaWeight$2[ebp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR _newDeltaWeight$1[ebp], xmm0

; 44   : 			* oldDeltaWeight;
; 45   : 
; 46   : 		neuron.m_outputWeights[m_myIndex].deltaWeight = newDeltaWeight;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _neuron$3[ebp]
	add	ecx, 8
	call	??A?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAEAAUConnection@@I@Z ; std::vector<Connection,std::allocator<Connection> >::operator[]
	movsd	xmm0, QWORD PTR _newDeltaWeight$1[ebp]
	movsd	QWORD PTR [eax+8], xmm0

; 47   : 		neuron.m_outputWeights[m_myIndex].weight += newDeltaWeight;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	ecx, DWORD PTR _neuron$3[ebp]
	add	ecx, 8
	call	??A?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAEAAUConnection@@I@Z ; std::vector<Connection,std::allocator<Connection> >::operator[]
	mov	DWORD PTR tv128[ebp], eax
	mov	eax, DWORD PTR tv128[ebp]
	movsd	xmm0, QWORD PTR [eax]
	addsd	xmm0, QWORD PTR _newDeltaWeight$1[ebp]
	mov	ecx, DWORD PTR tv128[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 48   : 	}

	jmp	$LN2@UpdateInpu
$LN3@UpdateInpu:

; 49   : }

	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?UpdateInputWeights@Neuron@@QAEXAAV?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@Z ENDP ; Neuron::UpdateInputWeights
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\uqac\iar\projetv2\projetiafinal\projet\neuron.cpp
_TEXT	SEGMENT
tv81 = -20						; size = 8
_dow$ = -12						; size = 8
_this$ = -4						; size = 4
_nextLayer$ = 8						; size = 4
?CalcHiddenGradients@Neuron@@QAEXABV?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@Z PROC ; Neuron::CalcHiddenGradients
; _this$ = ecx

; 85   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 86   : 	double dow = SumDOW(nextLayer);

	mov	eax, DWORD PTR _nextLayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SumDOW@Neuron@@ABENABV?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@Z ; Neuron::SumDOW
	fstp	QWORD PTR _dow$[ebp]

; 87   : 	m_gradient = dow * Neuron::TransferFunctionDerivative(m_outputVal);

	mov	ecx, DWORD PTR _this$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [ecx]
	movsd	QWORD PTR [esp], xmm0
	call	?TransferFunctionDerivative@Neuron@@CANN@Z ; Neuron::TransferFunctionDerivative
	add	esp, 8
	fstp	QWORD PTR tv81[ebp]
	movsd	xmm0, QWORD PTR tv81[ebp]
	mulsd	xmm0, QWORD PTR _dow$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movsd	QWORD PTR [edx+32], xmm0

; 88   : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?CalcHiddenGradients@Neuron@@QAEXABV?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@Z ENDP ; Neuron::CalcHiddenGradients
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\uqac\iar\projetv2\projetiafinal\projet\neuron.cpp
_TEXT	SEGMENT
tv79 = -20						; size = 8
_delta$ = -12						; size = 8
_this$ = -4						; size = 4
_targetVal$ = 8						; size = 8
?CalcOutputGradients@Neuron@@QAEXN@Z PROC		; Neuron::CalcOutputGradients
; _this$ = ecx

; 79   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 80   : 	double delta = targetVal - m_outputVal;

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR _targetVal$[ebp]
	subsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR _delta$[ebp], xmm0

; 81   : 	m_gradient = delta * Neuron::TransferFunctionDerivative(m_outputVal);

	mov	ecx, DWORD PTR _this$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [ecx]
	movsd	QWORD PTR [esp], xmm0
	call	?TransferFunctionDerivative@Neuron@@CANN@Z ; Neuron::TransferFunctionDerivative
	add	esp, 8
	fstp	QWORD PTR tv79[ebp]
	movsd	xmm0, QWORD PTR tv79[ebp]
	mulsd	xmm0, QWORD PTR _delta$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movsd	QWORD PTR [edx+32], xmm0

; 82   : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?CalcOutputGradients@Neuron@@QAEXN@Z ENDP		; Neuron::CalcOutputGradients
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\uqac\iar\projetv2\projetiafinal\projet\neuron.cpp
_TEXT	SEGMENT
tv141 = -32						; size = 8
tv95 = -24						; size = 8
_n$1 = -16						; size = 4
_sum$ = -12						; size = 8
_this$ = -4						; size = 4
_prevLayer$ = 8						; size = 4
?FeedForward@Neuron@@QAEXABV?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@Z PROC ; Neuron::FeedForward
; _this$ = ecx

; 53   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 54   : 	double sum = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _sum$[ebp], xmm0

; 55   : 	//sum the previous layer's output (which become inputs of the next layer)
; 56   : 	//include the bias node from the previous layer
; 57   : 	for (unsigned n = 0; n < prevLayer.size(); ++n)

	mov	DWORD PTR _n$1[ebp], 0
	jmp	SHORT $LN4@FeedForwar
$LN2@FeedForwar:
	mov	eax, DWORD PTR _n$1[ebp]
	add	eax, 1
	mov	DWORD PTR _n$1[ebp], eax
$LN4@FeedForwar:
	mov	ecx, DWORD PTR _prevLayer$[ebp]
	call	?size@?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@QBEIXZ ; std::vector<Neuron,std::allocator<Neuron> >::size
	cmp	DWORD PTR _n$1[ebp], eax
	jae	SHORT $LN3@FeedForwar

; 58   : 	{
; 59   : 		sum += prevLayer[n].GetOutputVal() *

	mov	ecx, DWORD PTR _n$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _prevLayer$[ebp]
	call	??A?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@QBEABVNeuron@@I@Z ; std::vector<Neuron,std::allocator<Neuron> >::operator[]
	mov	ecx, eax
	call	?GetOutputVal@Neuron@@QBENXZ		; Neuron::GetOutputVal
	fstp	QWORD PTR tv95[ebp]
	movsd	xmm0, QWORD PTR tv95[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _n$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _prevLayer$[ebp]
	movsd	QWORD PTR tv141[ebp], xmm0
	call	??A?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@QBEABVNeuron@@I@Z ; std::vector<Neuron,std::allocator<Neuron> >::operator[]
	add	eax, 8
	mov	ecx, eax
	call	??A?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QBEABUConnection@@I@Z ; std::vector<Connection,std::allocator<Connection> >::operator[]
	movsd	xmm0, QWORD PTR tv141[ebp]
	mulsd	xmm0, QWORD PTR [eax]
	addsd	xmm0, QWORD PTR _sum$[ebp]
	movsd	QWORD PTR _sum$[ebp], xmm0

; 60   : 			prevLayer[n].m_outputWeights[m_myIndex].weight;
; 61   : 	}

	jmp	SHORT $LN2@FeedForwar
$LN3@FeedForwar:

; 62   : 
; 63   : 	m_outputVal = TransferFunction(sum);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _sum$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?TransferFunction@Neuron@@CANN@Z	; Neuron::TransferFunction
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	fstp	QWORD PTR [edx]

; 64   : }

	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FeedForward@Neuron@@QAEXABV?$vector@VNeuron@@V?$allocator@VNeuron@@@std@@@std@@@Z ENDP ; Neuron::FeedForward
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\uqac\iar\projetv2\projetiafinal\projet\neuron.h
;	COMDAT ?GetOutputVal@Neuron@@QBENXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOutputVal@Neuron@@QBENXZ PROC			; Neuron::GetOutputVal, COMDAT
; _this$ = ecx

; 22   : 	double GetOutputVal() const { return m_outputVal; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	QWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetOutputVal@Neuron@@QBENXZ ENDP			; Neuron::GetOutputVal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\uqac\iar\projetv2\projetiafinal\projet\neuron.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Neuron@@QAE@XZ PROC					; Neuron::~Neuron
; _this$ = ecx

; 24   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 25   : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@XZ ; std::vector<Connection,std::allocator<Connection> >::~vector<Connection,std::allocator<Connection> >
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1Neuron@@QAE@XZ ENDP					; Neuron::~Neuron
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\uqac\iar\projetv2\projetiafinal\projet\neuron.cpp
_TEXT	SEGMENT
tv136 = -48						; size = 8
$T2 = -40						; size = 16
_c$3 = -24						; size = 4
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_numOutputs$ = 8					; size = 4
_myIndex$ = 12						; size = 4
??0Neuron@@QAE@II@Z PROC				; Neuron::Neuron
; _this$ = ecx

; 12   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Neuron@@QAE@II@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-48], eax
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@XZ ; std::vector<Connection,std::allocator<Connection> >::vector<Connection,std::allocator<Connection> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 13   : 	for (unsigned c = 0; c < numOutputs; ++c)

	mov	DWORD PTR _c$3[ebp], 0
	jmp	SHORT $LN4@Neuron
$LN2@Neuron:
	mov	eax, DWORD PTR _c$3[ebp]
	add	eax, 1
	mov	DWORD PTR _c$3[ebp], eax
$LN4@Neuron:
	mov	ecx, DWORD PTR _c$3[ebp]
	cmp	ecx, DWORD PTR _numOutputs$[ebp]
	jae	SHORT $LN3@Neuron

; 14   : 	{
; 15   : 		m_outputWeights.push_back(Connection());

	xor	edx, edx
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR $T2[ebp+4], edx
	mov	DWORD PTR $T2[ebp+8], edx
	mov	DWORD PTR $T2[ebp+12], edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?push_back@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAEX$$QAUConnection@@@Z ; std::vector<Connection,std::allocator<Connection> >::push_back

; 16   : 		m_outputWeights.back().weight = RandomWeight();

	call	?RandomWeight@Neuron@@CANXZ		; Neuron::RandomWeight
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	fstp	QWORD PTR tv136[ebp]
	call	?back@?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAEAAUConnection@@XZ ; std::vector<Connection,std::allocator<Connection> >::back
	fld	QWORD PTR tv136[ebp]
	fstp	QWORD PTR [eax]

; 17   : 	}

	jmp	SHORT $LN2@Neuron
$LN3@Neuron:

; 18   : 
; 19   : 	m_myIndex = myIndex;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _myIndex$[ebp]
	mov	DWORD PTR [ecx+24], edx

; 20   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0Neuron@@QAE@II@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$vector@UConnection@@V?$allocator@UConnection@@@std@@@std@@QAE@XZ ; std::vector<Connection,std::allocator<Connection> >::~vector<Connection,std::allocator<Connection> >
__ehhandler$??0Neuron@@QAE@II@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Neuron@@QAE@II@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Neuron@@QAE@II@Z ENDP				; Neuron::Neuron
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXII@Z
_TEXT	SEGMENT
__Ptr_container$1 = -12					; size = 4
__Ptr_ptr$2 = -8					; size = 4
__Ptr_user$3 = -4					; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
?_Deallocate@std@@YAXPAXII@Z PROC			; std::_Deallocate, COMDAT

; 101  : 	{	// deallocate storage for _Count elements of size _Sz

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 102  : 	if (_Count > static_cast<size_t>(-1) / _Sz)

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Sz$[ebp]
	cmp	DWORD PTR __Count$[ebp], eax
	jbe	SHORT $LN2@Deallocate

; 103  : 		{
; 104  : 		goto _Invalid_parameter; // TRANSITION, VSO#359498

	jmp	$_Invalid_parameter$16
	jmp	$_Invalid_parameter$16
$LN2@Deallocate:

; 105  : 		}
; 106  : 
; 107  : 	if (_BIG_ALLOCATION_THRESHOLD <= _Count * _Sz)

	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, DWORD PTR __Sz$[ebp]
	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN4@Deallocate

; 108  : 		{	// deallocate large block
; 109  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Ptr_user$3[ebp], ecx

; 110  : 		if ((_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) != 0)

	mov	edx, DWORD PTR __Ptr_user$3[ebp]
	and	edx, 31					; 0000001fH
	je	SHORT $LN5@Deallocate

; 111  : 			{
; 112  : 			goto _Invalid_parameter;

	jmp	SHORT $_Invalid_parameter$16
	jmp	SHORT $_Invalid_parameter$16
$LN5@Deallocate:

; 113  : 			}
; 114  : 
; 115  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);

	mov	eax, DWORD PTR __Ptr_user$3[ebp]
	sub	eax, 4
	mov	DWORD PTR __Ptr_ptr$2[ebp], eax

; 116  : 		const uintptr_t _Ptr_container =
; 117  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

	mov	ecx, DWORD PTR __Ptr_ptr$2[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Ptr_container$1[ebp], edx

; 118  : 
; 119  :  #ifdef _DEBUG
; 120  : 		// If the following asserts, it likely means that we are performing
; 121  : 		// an aligned delete on memory coming from an unaligned allocation.
; 122  : 		if (reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] != _BIG_ALLOCATION_SENTINEL)

	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR __Ptr_ptr$2[ebp]
	cmp	DWORD PTR [edx+ecx], -84215046		; fafafafaH
	je	SHORT $LN7@Deallocate

; 123  : 			{
; 124  : 			goto _Invalid_parameter;

	jmp	SHORT $_Invalid_parameter$16
	jmp	SHORT $_Invalid_parameter$16
$LN7@Deallocate:

; 125  : 			}
; 126  :  #endif /* _DEBUG */
; 127  : 
; 128  : 		// Extra paranoia on aligned allocation/deallocation
; 129  : 		if (_Ptr_container >= _Ptr_user)

	mov	eax, DWORD PTR __Ptr_container$1[ebp]
	cmp	eax, DWORD PTR __Ptr_user$3[ebp]
	jb	SHORT $LN9@Deallocate

; 130  : 			{
; 131  : 			goto _Invalid_parameter;

	jmp	SHORT $_Invalid_parameter$16
	jmp	SHORT $_Invalid_parameter$16
$LN9@Deallocate:

; 132  : 			}
; 133  : 
; 134  :  #ifdef _DEBUG
; 135  : 		if (2 * sizeof(void *) > _Ptr_user - _Ptr_container)

	mov	ecx, DWORD PTR __Ptr_user$3[ebp]
	sub	ecx, DWORD PTR __Ptr_container$1[ebp]
	cmp	ecx, 8
	jae	SHORT $LN11@Deallocate

; 136  :  #else /* _DEBUG */
; 137  : 		if (sizeof(void *) > _Ptr_user - _Ptr_container)
; 138  :  #endif /* _DEBUG */
; 139  : 			{
; 140  : 			goto _Invalid_parameter;

	jmp	SHORT $_Invalid_parameter$16
	jmp	SHORT $_Invalid_parameter$16
$LN11@Deallocate:

; 141  : 			}
; 142  : 
; 143  : 		if (_Ptr_user - _Ptr_container > _NON_USER_SIZE)

	mov	edx, DWORD PTR __Ptr_user$3[ebp]
	sub	edx, DWORD PTR __Ptr_container$1[ebp]
	cmp	edx, 39					; 00000027H
	jbe	SHORT $LN13@Deallocate

; 144  : 			{
; 145  : 			goto _Invalid_parameter;

	jmp	SHORT $_Invalid_parameter$16
	jmp	SHORT $_Invalid_parameter$16
$LN13@Deallocate:

; 146  : 			}
; 147  : 
; 148  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

	mov	eax, DWORD PTR __Ptr_container$1[ebp]
	mov	DWORD PTR __Ptr$[ebp], eax
$LN4@Deallocate:

; 149  : 		}
; 150  : 
; 151  : 	::operator delete(_Ptr);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 152  : 	return;

	jmp	SHORT $LN1@Deallocate
$_Invalid_parameter$16:

; 153  : 
; 154  : _Invalid_parameter:
; 155  : 	_SCL_SECURE_INVALID_ARGUMENT_NO_ASSERT;

	push	0
	push	155					; 0000009bH
	push	OFFSET ??_C@_1NC@LIFDFPCJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN1@Deallocate:

; 156  : 	}

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Deallocate@std@@YAXPAXII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPAXII_N@Z
_TEXT	SEGMENT
__Ptr_container$1 = -16					; size = 4
__Block_size$2 = -12					; size = 4
__User_size$ = -8					; size = 4
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
?_Allocate@std@@YAPAXII_N@Z PROC			; std::_Allocate, COMDAT

; 49   : 	{	// allocate storage for _Count elements of size _Sz

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 50   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 51   : 
; 52   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN2@Allocate

; 53   : 		{
; 54   : 		return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	jmp	$LN8@Allocate
$LN2@Allocate:

; 55   : 		}
; 56   : 
; 57   : 	// check overflow of multiply
; 58   : 	if (static_cast<size_t>(-1) / _Sz < _Count)

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Sz$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN3@Allocate

; 59   : 		{
; 60   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 61   : 		}
; 62   : 
; 63   : 	const size_t _User_size = _Count * _Sz;

	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, DWORD PTR __Sz$[ebp]
	mov	DWORD PTR __User_size$[ebp], eax

; 64   : 
; 65   : #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

	movzx	ecx, BYTE PTR __Try_aligned_allocation$[ebp]
	test	ecx, ecx
	je	$LN4@Allocate
	cmp	DWORD PTR __User_size$[ebp], 4096	; 00001000H
	jb	$LN4@Allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof(void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

	mov	edx, DWORD PTR __User_size$[ebp]
	add	edx, 39					; 00000027H
	mov	DWORD PTR __Block_size$2[ebp], edx

; 72   : 		if (_Block_size <= _User_size)

	mov	eax, DWORD PTR __Block_size$2[ebp]
	cmp	eax, DWORD PTR __User_size$[ebp]
	ja	SHORT $LN5@Allocate

; 73   : 			{
; 74   : 			_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN5@Allocate:

; 75   : 			}
; 76   : 
; 77   : 		const uintptr_t _Ptr_container =
; 78   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

	mov	ecx, DWORD PTR __Block_size$2[ebp]
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr_container$1[ebp], eax

; 79   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

	cmp	DWORD PTR __Ptr_container$1[ebp], 0
	jne	SHORT $LN6@Allocate
	mov	edx, OFFSET ??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@
	test	edx, edx
	je	SHORT $LN9@Allocate
	xor	eax, eax
	jne	SHORT $LN10@Allocate
$LN9@Allocate:
	push	OFFSET ??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
	push	OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
	push	0
	push	79					; 0000004fH
	push	OFFSET ??_C@_1NC@LIFDFPCJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN10@Allocate
	int	3
$LN10@Allocate:
	push	0
	push	79					; 0000004fH
	push	OFFSET ??_C@_1NC@LIFDFPCJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN6@Allocate:

; 80   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

	mov	edx, DWORD PTR __Ptr_container$1[ebp]
	add	edx, 39					; 00000027H
	and	edx, -32				; ffffffe0H
	mov	DWORD PTR __Ptr$[ebp], edx

; 81   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	eax, DWORD PTR __Ptr_container$1[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 83   : 
; 84   :  #ifdef _DEBUG
; 85   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;

	mov	ecx, 4
	imul	edx, ecx, -2
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [eax+edx], -84215046		; fafafafaH

; 86   :  #endif /* _DEBUG */
; 87   :  		return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	jmp	SHORT $LN8@Allocate
$LN4@Allocate:

; 88   : 		}
; 89   : #else /* ^^^ x86/x64 hardware ^^^ // vvv ARM hardware vvv */
; 90   : 	(void)_Try_aligned_allocation;
; 91   : #endif /* defined(_M_IX86) || defined(_M_X64) */
; 92   : 
; 93   : 	_Ptr = ::operator new(_User_size);

	mov	ecx, DWORD PTR __User_size$[ebp]
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax

; 94   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN7@Allocate
	mov	edx, OFFSET ??_C@_09GLJCAGLP@_Ptr?5?$CB?$DN?50?$AA@
	test	edx, edx
	je	SHORT $LN11@Allocate
	xor	eax, eax
	jne	SHORT $LN12@Allocate
$LN11@Allocate:
	push	OFFSET ??_C@_1CC@GKJLLHIM@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
	push	OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
	push	0
	push	94					; 0000005eH
	push	OFFSET ??_C@_1NC@LIFDFPCJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN12@Allocate
	int	3
$LN12@Allocate:
	push	0
	push	94					; 0000005eH
	push	OFFSET ??_C@_1NC@LIFDFPCJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN7@Allocate:

; 95   : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN8@Allocate:

; 96   : 	}

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Allocate@std@@YAPAXII_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ PROC	; std::_Iterator_base12::_Getpnext, COMDAT
; _this$ = ecx

; 209  : 		{	// get address of remaining iterator chain

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 210  : 		return (&_Mynextiter);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4

; 211  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ENDP	; std::_Iterator_base12::_Getpnext
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Clrcont@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Clrcont@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Clrcont, COMDAT
; _this$ = ecx

; 199  : 		{	// disown owning container

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 		_Myproxy = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 201  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Clrcont@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Clrcont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$2 = -32						; size = 4
__Lock$3 = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 239  : 	{	// orphan all iterators

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 240  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 241  : 	if (_Myproxy != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_all

; 242  : 		{	// proxy allocated, drain it
; 243  : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$3[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 244  : 
; 245  : 		for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR __Pnext$2[ebp], edx
	jmp	SHORT $LN4@Orphan_all
$LN2@Orphan_all:

; 246  : 			*_Pnext != 0; *_Pnext = (*_Pnext)->_Mynextiter)

	mov	eax, DWORD PTR __Pnext$2[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnext$2[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
$LN4@Orphan_all:
	mov	ecx, DWORD PTR __Pnext$2[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@Orphan_all

; 247  : 			(*_Pnext)->_Myproxy = 0;

	mov	edx, DWORD PTR __Pnext$2[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax], 0
	jmp	SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 248  : 		_Myproxy->_Myfirstiter = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+4], 0

; 249  : 		}

	lea	ecx, DWORD PTR __Lock$3[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN6@Orphan_all:

; 250  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 251  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Orphan_all
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@Orphan_all:
	DD	1
	DD	$LN9@Orphan_all
$LN9@Orphan_all:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN7@Orphan_all
$LN7@Orphan_all:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ PROC ; std::_Container_base12::_Getpfirst, COMDAT
; _this$ = ecx

; 120  : 		{	// get address of iterator chain

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 121  : 		return (_Myproxy == 0 ? 0 : &_Myproxy->_Myfirstiter);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@Getpfirst
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@Getpfirst
$LN3@Getpfirst:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR tv68[ebp], edx
$LN4@Getpfirst:
	mov	eax, DWORD PTR tv68[ebp]

; 122  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ENDP ; std::_Container_base12::_Getpfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??1_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::~_Container_base12, COMDAT
; _this$ = ecx

; 115  : 		{	// destroy the container

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 116  : 		_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 117  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::~_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 101  : 		{	// construct childless container

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 100  : 		: _Myproxy(0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 102  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 89   : 		{	// construct from pointers

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 88   : 		: _Mycont(0), _Myfirstiter(0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 90   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 91   :     {

	push	ebp
	mov	ebp, esp

; 92   :         (void)_Size;
; 93   :         return _Where;

	mov	eax, DWORD PTR __Where$[ebp]

; 94   :     }

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.11.25503\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 682  : 		{	// return maximum value

	push	ebp
	mov	ebp, esp

; 683  : 		return (INT_MAX);

	mov	eax, 2147483647				; 7fffffffH

; 684  : 		}

	pop	ebp
	ret	0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
END
